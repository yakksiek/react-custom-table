{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 48,
            "patches": [
                {
                    "date": 1706217851769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706218002904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n ![application presentation](src/assets/gif/add-transaction.gif)\n \n # Currency Wallet\n \n-The Currency Wallet application is a financial tracking tool that allows users to manually input their historical transactions involving various currencies. It utilizes APIs to fetch the historical exchange rates for each transaction date, providing an accurate financial overview. The application then displays a chart showing the profit or loss for each transaction, calculated based on current currency rates, enabling users to assess their investment performance over time.\n+The custom React table application is a dynamic and interactive web application designed to demonstrate the implementation of table features, including custom pagination and API data fetching. Built with React, it serves as an educational tool for practicing test-driven development using the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n \n **Main features**:\n \n 1. **API Rate Fetching**\n"
                },
                {
                    "date": 1706218016692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n ![application presentation](src/assets/gif/add-transaction.gif)\n \n # Currency Wallet\n \n-The custom React table application is a dynamic and interactive web application designed to demonstrate the implementation of table features, including custom pagination and API data fetching. Built with React, it serves as an educational tool for practicing test-driven development using the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n+The React Table application is a dynamic and interactive web application designed to demonstrate the implementation of table features, including custom pagination and API data fetching. Built with React, it serves as an educational tool for practicing test-driven development using the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n \n **Main features**:\n \n 1. **API Rate Fetching**\n"
                },
                {
                    "date": 1706218029034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n ![application presentation](src/assets/gif/add-transaction.gif)\n \n-# Currency Wallet\n+# React Custom Table\n \n The React Table application is a dynamic and interactive web application designed to demonstrate the implementation of table features, including custom pagination and API data fetching. Built with React, it serves as an educational tool for practicing test-driven development using the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n \n **Main features**:\n"
                },
                {
                    "date": 1706218043930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+![application presentation](src/assets/gif/add-transaction.gif)\n+\n+# React Custom Table\n+\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and API data fetching. Built with React, it serves as an educational tool for practicing test-driven development using the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n+\n+**Main features**:\n+\n+1. **API Rate Fetching**\n+   - Integrates with APIs for real-time and historical currency exchange rates.\n+   - Ensures accurate financial data for each transaction.\n+\n+2. **Live Transaction Validation**\n+   - Performs live validation during transaction entry.\n+\n+3. **ChartJS 2 Integration**\n+   - Uses ChartJS 2 for visual representation of financial data.\n+   - Provides clear, interactive charts to display profit or loss.\n+\n+4. **Redux Toolkit**\n+   - Employs Redux Toolkit for efficient state management.\n+\n+5. **Dark Mode**\n+   - Offers a user-friendly dark mode.\n+   - Reduces eye strain and provides an alternative aesthetic.\n+\n+6. **Custom Hooks for Form**\n+   - Custom hooks enhance form handling and selection options.\n+\n+7. **Local Storage**\n+   - Stores user data and preferences locally.\n+   - Allows for persistent user experiences and quick data retrieval.\n+\n+&nbsp;\n+\n+## 💡 Technologies\n+\n+![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n+![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n+![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n+![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n+![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n+![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n+![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n+![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n+\n+&nbsp;\n+\n+## 💿 Installation\n+\n+The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n+\n+1. **Install Dependencies**\n+   - Open your terminal.\n+   - Navigate to the project's root directory.\n+   - Type `npm i` to install the necessary packages.\n+\n+2. **API Key Setup**\n+   - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n+   - In the `src` folder of the project, create a file named `API_KEY.js`.\n+   - Inside `API_KEY.js`, export the API key as follows:\n+\n+     ```javascript\n+     const API_KEY = 'your_api_key_here';\n+     export default API_KEY;\n+     ```\n+\n+   - Replace `your_api_key_here` with the actual API key you obtained.\n+\n+By following these steps, you will set up the necessary environment and API access for the application.\n+\n+\n+\n+&nbsp;\n+\n+## 🤔 Solutions provided in the project\n+\n+**Custom Hook for the form component**\n+\n+```javascript \n+function useForm() {\n+    const { formData, formErrors } = useSelector((store) => store.form);\n+    const { loading, error: fetchError } = useSelector((store) => store.currency.historical);\n+    const dispatch = useDispatch();\n+\n+    useEffect(() => {\n+        if (formData.date !== '' && formData.currency !== '') {\n+            const [dateString] = formData.date.split('T');\n+            const [_, currencyString] = formData.currency.split(' ');\n+\n+            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n+        }\n+    }, [formData.date, formData.currency]);\n+\n+    const liveValidation = (input) => {\n+        const { name } = input;\n+        const errorInState = formErrors[name];\n+        if (!errorInState) return;\n+\n+        const inputError = h.validate(db.formFields, [input]);\n+        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n+        if (!isErrorObjEmpty) return;\n+\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleCustomInputSelection = (name, value) => {\n+        dispatch(formActions.setFormData({ name, value }));\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleSubmit = (e) => {\n+        e.preventDefault();\n+\n+        const form = e.target;\n+\n+        // input validation\n+        const inputElements = h.findInputElementsInForm(form);\n+        const fieldErrors = h.validate(db.formFields, inputElements);\n+\n+        // custom validation\n+        const customInputsErrors = h.customValidation(db.formFields, formData);\n+        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n+\n+        dispatch(formActions.setErrors(updatedErrors));\n+\n+        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n+        if (!isFormClean) {\n+            return;\n+        }\n+\n+        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n+        dispatch(formActions.resetForm());\n+    };\n+\n+    const handleFetchErrorReset = () => {\n+        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n+    };\n+\n+    const handleFieldChange = (e) => {\n+        const { name, value } = e.target;\n+        dispatch(formActions.setFormData({ name, value }));\n+        liveValidation(e.target);\n+    };\n+\n+    return {\n+        formData,\n+        formErrors,\n+        loading,\n+        fetchError,\n+        liveValidation,\n+        handleCustomInputSelection,\n+        handleSubmit,\n+        handleFetchErrorReset,\n+        handleFieldChange,\n+    };\n+}\n+\n+```\n+\n+&nbsp;\n+\n+-   **Custom Select**: Offers both search and select function with keys.\n+\n+![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+\n+&nbsp;\n+\n+-   **Error handling**: Offers fetch error handling.\n+\n+![error handling](src/assets/gif/fetch-error-handling.gif)\n+\n+&nbsp;\n+\n+## 💭 Possible future features\n+\n+-   **Filtering by month/year, biggest gain/loss**\n+\n+&nbsp;\n+\n+## 🙋‍♂️ Feel free to contact me\n+\n+Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n+\n+&nbsp;\n+\n+## 👏 Thanks / Special thanks / Credits\n+\n+Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218052993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+![application presentation](src/assets/gif/add-transaction.gif)\n+\n+# React Custom Table\n+\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. Built with React, it serves as an educational tool for practicing test-driven development using the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n+\n+**Main features**:\n+\n+1. **API Rate Fetching**\n+   - Integrates with APIs for real-time and historical currency exchange rates.\n+   - Ensures accurate financial data for each transaction.\n+\n+2. **Live Transaction Validation**\n+   - Performs live validation during transaction entry.\n+\n+3. **ChartJS 2 Integration**\n+   - Uses ChartJS 2 for visual representation of financial data.\n+   - Provides clear, interactive charts to display profit or loss.\n+\n+4. **Redux Toolkit**\n+   - Employs Redux Toolkit for efficient state management.\n+\n+5. **Dark Mode**\n+   - Offers a user-friendly dark mode.\n+   - Reduces eye strain and provides an alternative aesthetic.\n+\n+6. **Custom Hooks for Form**\n+   - Custom hooks enhance form handling and selection options.\n+\n+7. **Local Storage**\n+   - Stores user data and preferences locally.\n+   - Allows for persistent user experiences and quick data retrieval.\n+\n+&nbsp;\n+\n+## 💡 Technologies\n+\n+![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n+![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n+![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n+![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n+![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n+![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n+![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n+![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n+\n+&nbsp;\n+\n+## 💿 Installation\n+\n+The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n+\n+1. **Install Dependencies**\n+   - Open your terminal.\n+   - Navigate to the project's root directory.\n+   - Type `npm i` to install the necessary packages.\n+\n+2. **API Key Setup**\n+   - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n+   - In the `src` folder of the project, create a file named `API_KEY.js`.\n+   - Inside `API_KEY.js`, export the API key as follows:\n+\n+     ```javascript\n+     const API_KEY = 'your_api_key_here';\n+     export default API_KEY;\n+     ```\n+\n+   - Replace `your_api_key_here` with the actual API key you obtained.\n+\n+By following these steps, you will set up the necessary environment and API access for the application.\n+\n+\n+\n+&nbsp;\n+\n+## 🤔 Solutions provided in the project\n+\n+**Custom Hook for the form component**\n+\n+```javascript \n+function useForm() {\n+    const { formData, formErrors } = useSelector((store) => store.form);\n+    const { loading, error: fetchError } = useSelector((store) => store.currency.historical);\n+    const dispatch = useDispatch();\n+\n+    useEffect(() => {\n+        if (formData.date !== '' && formData.currency !== '') {\n+            const [dateString] = formData.date.split('T');\n+            const [_, currencyString] = formData.currency.split(' ');\n+\n+            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n+        }\n+    }, [formData.date, formData.currency]);\n+\n+    const liveValidation = (input) => {\n+        const { name } = input;\n+        const errorInState = formErrors[name];\n+        if (!errorInState) return;\n+\n+        const inputError = h.validate(db.formFields, [input]);\n+        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n+        if (!isErrorObjEmpty) return;\n+\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleCustomInputSelection = (name, value) => {\n+        dispatch(formActions.setFormData({ name, value }));\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleSubmit = (e) => {\n+        e.preventDefault();\n+\n+        const form = e.target;\n+\n+        // input validation\n+        const inputElements = h.findInputElementsInForm(form);\n+        const fieldErrors = h.validate(db.formFields, inputElements);\n+\n+        // custom validation\n+        const customInputsErrors = h.customValidation(db.formFields, formData);\n+        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n+\n+        dispatch(formActions.setErrors(updatedErrors));\n+\n+        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n+        if (!isFormClean) {\n+            return;\n+        }\n+\n+        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n+        dispatch(formActions.resetForm());\n+    };\n+\n+    const handleFetchErrorReset = () => {\n+        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n+    };\n+\n+    const handleFieldChange = (e) => {\n+        const { name, value } = e.target;\n+        dispatch(formActions.setFormData({ name, value }));\n+        liveValidation(e.target);\n+    };\n+\n+    return {\n+        formData,\n+        formErrors,\n+        loading,\n+        fetchError,\n+        liveValidation,\n+        handleCustomInputSelection,\n+        handleSubmit,\n+        handleFetchErrorReset,\n+        handleFieldChange,\n+    };\n+}\n+\n+```\n+\n+&nbsp;\n+\n+-   **Custom Select**: Offers both search and select function with keys.\n+\n+![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+\n+&nbsp;\n+\n+-   **Error handling**: Offers fetch error handling.\n+\n+![error handling](src/assets/gif/fetch-error-handling.gif)\n+\n+&nbsp;\n+\n+## 💭 Possible future features\n+\n+-   **Filtering by month/year, biggest gain/loss**\n+\n+&nbsp;\n+\n+## 🙋‍♂️ Feel free to contact me\n+\n+Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n+\n+&nbsp;\n+\n+## 👏 Thanks / Special thanks / Credits\n+\n+Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218061182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n ![application presentation](src/assets/gif/add-transaction.gif)\n \n # React Custom Table\n \n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. Built with React, it serves as an educational tool for practicing test-driven development using the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing test-driven development using the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n \n **Main features**:\n \n 1. **API Rate Fetching**\n"
                },
                {
                    "date": 1706218079700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+![application presentation](src/assets/gif/add-transaction.gif)\n+\n+# React Custom Table\n+\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n+\n+**Main features**:\n+\n+1. **API Rate Fetching**\n+   - Integrates with APIs for real-time and historical currency exchange rates.\n+   - Ensures accurate financial data for each transaction.\n+\n+2. **Live Transaction Validation**\n+   - Performs live validation during transaction entry.\n+\n+3. **ChartJS 2 Integration**\n+   - Uses ChartJS 2 for visual representation of financial data.\n+   - Provides clear, interactive charts to display profit or loss.\n+\n+4. **Redux Toolkit**\n+   - Employs Redux Toolkit for efficient state management.\n+\n+5. **Dark Mode**\n+   - Offers a user-friendly dark mode.\n+   - Reduces eye strain and provides an alternative aesthetic.\n+\n+6. **Custom Hooks for Form**\n+   - Custom hooks enhance form handling and selection options.\n+\n+7. **Local Storage**\n+   - Stores user data and preferences locally.\n+   - Allows for persistent user experiences and quick data retrieval.\n+\n+&nbsp;\n+\n+## 💡 Technologies\n+\n+![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n+![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n+![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n+![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n+![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n+![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n+![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n+![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n+\n+&nbsp;\n+\n+## 💿 Installation\n+\n+The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n+\n+1. **Install Dependencies**\n+   - Open your terminal.\n+   - Navigate to the project's root directory.\n+   - Type `npm i` to install the necessary packages.\n+\n+2. **API Key Setup**\n+   - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n+   - In the `src` folder of the project, create a file named `API_KEY.js`.\n+   - Inside `API_KEY.js`, export the API key as follows:\n+\n+     ```javascript\n+     const API_KEY = 'your_api_key_here';\n+     export default API_KEY;\n+     ```\n+\n+   - Replace `your_api_key_here` with the actual API key you obtained.\n+\n+By following these steps, you will set up the necessary environment and API access for the application.\n+\n+\n+\n+&nbsp;\n+\n+## 🤔 Solutions provided in the project\n+\n+**Custom Hook for the form component**\n+\n+```javascript \n+function useForm() {\n+    const { formData, formErrors } = useSelector((store) => store.form);\n+    const { loading, error: fetchError } = useSelector((store) => store.currency.historical);\n+    const dispatch = useDispatch();\n+\n+    useEffect(() => {\n+        if (formData.date !== '' && formData.currency !== '') {\n+            const [dateString] = formData.date.split('T');\n+            const [_, currencyString] = formData.currency.split(' ');\n+\n+            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n+        }\n+    }, [formData.date, formData.currency]);\n+\n+    const liveValidation = (input) => {\n+        const { name } = input;\n+        const errorInState = formErrors[name];\n+        if (!errorInState) return;\n+\n+        const inputError = h.validate(db.formFields, [input]);\n+        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n+        if (!isErrorObjEmpty) return;\n+\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleCustomInputSelection = (name, value) => {\n+        dispatch(formActions.setFormData({ name, value }));\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleSubmit = (e) => {\n+        e.preventDefault();\n+\n+        const form = e.target;\n+\n+        // input validation\n+        const inputElements = h.findInputElementsInForm(form);\n+        const fieldErrors = h.validate(db.formFields, inputElements);\n+\n+        // custom validation\n+        const customInputsErrors = h.customValidation(db.formFields, formData);\n+        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n+\n+        dispatch(formActions.setErrors(updatedErrors));\n+\n+        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n+        if (!isFormClean) {\n+            return;\n+        }\n+\n+        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n+        dispatch(formActions.resetForm());\n+    };\n+\n+    const handleFetchErrorReset = () => {\n+        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n+    };\n+\n+    const handleFieldChange = (e) => {\n+        const { name, value } = e.target;\n+        dispatch(formActions.setFormData({ name, value }));\n+        liveValidation(e.target);\n+    };\n+\n+    return {\n+        formData,\n+        formErrors,\n+        loading,\n+        fetchError,\n+        liveValidation,\n+        handleCustomInputSelection,\n+        handleSubmit,\n+        handleFetchErrorReset,\n+        handleFieldChange,\n+    };\n+}\n+\n+```\n+\n+&nbsp;\n+\n+-   **Custom Select**: Offers both search and select function with keys.\n+\n+![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+\n+&nbsp;\n+\n+-   **Error handling**: Offers fetch error handling.\n+\n+![error handling](src/assets/gif/fetch-error-handling.gif)\n+\n+&nbsp;\n+\n+## 💭 Possible future features\n+\n+-   **Filtering by month/year, biggest gain/loss**\n+\n+&nbsp;\n+\n+## 🙋‍♂️ Feel free to contact me\n+\n+Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n+\n+&nbsp;\n+\n+## 👏 Thanks / Special thanks / Credits\n+\n+Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218093355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n ![application presentation](src/assets/gif/add-transaction.gif)\n \n # React Custom Table\n \n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n \n **Main features**:\n \n 1. **API Rate Fetching**\n@@ -187,574 +187,4 @@\n \n ## 👏 Thanks / Special thanks / Credits\n \n Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n-![application presentation](src/assets/gif/add-transaction.gif)\n-\n-# React Custom Table\n-\n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing test-driven development using the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n-\n-**Main features**:\n-\n-1. **API Rate Fetching**\n-   - Integrates with APIs for real-time and historical currency exchange rates.\n-   - Ensures accurate financial data for each transaction.\n-\n-2. **Live Transaction Validation**\n-   - Performs live validation during transaction entry.\n-\n-3. **ChartJS 2 Integration**\n-   - Uses ChartJS 2 for visual representation of financial data.\n-   - Provides clear, interactive charts to display profit or loss.\n-\n-4. **Redux Toolkit**\n-   - Employs Redux Toolkit for efficient state management.\n-\n-5. **Dark Mode**\n-   - Offers a user-friendly dark mode.\n-   - Reduces eye strain and provides an alternative aesthetic.\n-\n-6. **Custom Hooks for Form**\n-   - Custom hooks enhance form handling and selection options.\n-\n-7. **Local Storage**\n-   - Stores user data and preferences locally.\n-   - Allows for persistent user experiences and quick data retrieval.\n-\n-&nbsp;\n-\n-## 💡 Technologies\n-\n-![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n-![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n-![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n-![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n-![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n-![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n-![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n-![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n-\n-&nbsp;\n-\n-## 💿 Installation\n-\n-The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n-\n-1. **Install Dependencies**\n-   - Open your terminal.\n-   - Navigate to the project's root directory.\n-   - Type `npm i` to install the necessary packages.\n-\n-2. **API Key Setup**\n-   - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n-   - In the `src` folder of the project, create a file named `API_KEY.js`.\n-   - Inside `API_KEY.js`, export the API key as follows:\n-\n-     ```javascript\n-     const API_KEY = 'your_api_key_here';\n-     export default API_KEY;\n-     ```\n-\n-   - Replace `your_api_key_here` with the actual API key you obtained.\n-\n-By following these steps, you will set up the necessary environment and API access for the application.\n-\n-\n-\n-&nbsp;\n-\n-## 🤔 Solutions provided in the project\n-\n-**Custom Hook for the form component**\n-\n-```javascript \n-function useForm() {\n-    const { formData, formErrors } = useSelector((store) => store.form);\n-    const { loading, error: fetchError } = useSelector((store) => store.currency.historical);\n-    const dispatch = useDispatch();\n-\n-    useEffect(() => {\n-        if (formData.date !== '' && formData.currency !== '') {\n-            const [dateString] = formData.date.split('T');\n-            const [_, currencyString] = formData.currency.split(' ');\n-\n-            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n-        }\n-    }, [formData.date, formData.currency]);\n-\n-    const liveValidation = (input) => {\n-        const { name } = input;\n-        const errorInState = formErrors[name];\n-        if (!errorInState) return;\n-\n-        const inputError = h.validate(db.formFields, [input]);\n-        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n-        if (!isErrorObjEmpty) return;\n-\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleCustomInputSelection = (name, value) => {\n-        dispatch(formActions.setFormData({ name, value }));\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleSubmit = (e) => {\n-        e.preventDefault();\n-\n-        const form = e.target;\n-\n-        // input validation\n-        const inputElements = h.findInputElementsInForm(form);\n-        const fieldErrors = h.validate(db.formFields, inputElements);\n-\n-        // custom validation\n-        const customInputsErrors = h.customValidation(db.formFields, formData);\n-        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n-\n-        dispatch(formActions.setErrors(updatedErrors));\n-\n-        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n-        if (!isFormClean) {\n-            return;\n-        }\n-\n-        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n-        dispatch(formActions.resetForm());\n-    };\n-\n-    const handleFetchErrorReset = () => {\n-        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n-    };\n-\n-    const handleFieldChange = (e) => {\n-        const { name, value } = e.target;\n-        dispatch(formActions.setFormData({ name, value }));\n-        liveValidation(e.target);\n-    };\n-\n-    return {\n-        formData,\n-        formErrors,\n-        loading,\n-        fetchError,\n-        liveValidation,\n-        handleCustomInputSelection,\n-        handleSubmit,\n-        handleFetchErrorReset,\n-        handleFieldChange,\n-    };\n-}\n-\n-```\n-\n-&nbsp;\n-\n--   **Custom Select**: Offers both search and select function with keys.\n-\n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n-\n-&nbsp;\n-\n--   **Error handling**: Offers fetch error handling.\n-\n-![error handling](src/assets/gif/fetch-error-handling.gif)\n-\n-&nbsp;\n-\n-## 💭 Possible future features\n-\n--   **Filtering by month/year, biggest gain/loss**\n-\n-&nbsp;\n-\n-## 🙋‍♂️ Feel free to contact me\n-\n-Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n-\n-&nbsp;\n-\n-## 👏 Thanks / Special thanks / Credits\n-\n-Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n-![application presentation](src/assets/gif/add-transaction.gif)\n-\n-# React Custom Table\n-\n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and API data fetching. Built with React, it serves as an educational tool for practicing test-driven development using the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n-\n-**Main features**:\n-\n-1. **API Rate Fetching**\n-   - Integrates with APIs for real-time and historical currency exchange rates.\n-   - Ensures accurate financial data for each transaction.\n-\n-2. **Live Transaction Validation**\n-   - Performs live validation during transaction entry.\n-\n-3. **ChartJS 2 Integration**\n-   - Uses ChartJS 2 for visual representation of financial data.\n-   - Provides clear, interactive charts to display profit or loss.\n-\n-4. **Redux Toolkit**\n-   - Employs Redux Toolkit for efficient state management.\n-\n-5. **Dark Mode**\n-   - Offers a user-friendly dark mode.\n-   - Reduces eye strain and provides an alternative aesthetic.\n-\n-6. **Custom Hooks for Form**\n-   - Custom hooks enhance form handling and selection options.\n-\n-7. **Local Storage**\n-   - Stores user data and preferences locally.\n-   - Allows for persistent user experiences and quick data retrieval.\n-\n-&nbsp;\n-\n-## 💡 Technologies\n-\n-![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n-![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n-![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n-![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n-![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n-![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n-![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n-![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n-\n-&nbsp;\n-\n-## 💿 Installation\n-\n-The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n-\n-1. **Install Dependencies**\n-   - Open your terminal.\n-   - Navigate to the project's root directory.\n-   - Type `npm i` to install the necessary packages.\n-\n-2. **API Key Setup**\n-   - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n-   - In the `src` folder of the project, create a file named `API_KEY.js`.\n-   - Inside `API_KEY.js`, export the API key as follows:\n-\n-     ```javascript\n-     const API_KEY = 'your_api_key_here';\n-     export default API_KEY;\n-     ```\n-\n-   - Replace `your_api_key_here` with the actual API key you obtained.\n-\n-By following these steps, you will set up the necessary environment and API access for the application.\n-\n-\n-\n-&nbsp;\n-\n-## 🤔 Solutions provided in the project\n-\n-**Custom Hook for the form component**\n-\n-```javascript \n-function useForm() {\n-    const { formData, formErrors } = useSelector((store) => store.form);\n-    const { loading, error: fetchError } = useSelector((store) => store.currency.historical);\n-    const dispatch = useDispatch();\n-\n-    useEffect(() => {\n-        if (formData.date !== '' && formData.currency !== '') {\n-            const [dateString] = formData.date.split('T');\n-            const [_, currencyString] = formData.currency.split(' ');\n-\n-            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n-        }\n-    }, [formData.date, formData.currency]);\n-\n-    const liveValidation = (input) => {\n-        const { name } = input;\n-        const errorInState = formErrors[name];\n-        if (!errorInState) return;\n-\n-        const inputError = h.validate(db.formFields, [input]);\n-        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n-        if (!isErrorObjEmpty) return;\n-\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleCustomInputSelection = (name, value) => {\n-        dispatch(formActions.setFormData({ name, value }));\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleSubmit = (e) => {\n-        e.preventDefault();\n-\n-        const form = e.target;\n-\n-        // input validation\n-        const inputElements = h.findInputElementsInForm(form);\n-        const fieldErrors = h.validate(db.formFields, inputElements);\n-\n-        // custom validation\n-        const customInputsErrors = h.customValidation(db.formFields, formData);\n-        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n-\n-        dispatch(formActions.setErrors(updatedErrors));\n-\n-        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n-        if (!isFormClean) {\n-            return;\n-        }\n-\n-        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n-        dispatch(formActions.resetForm());\n-    };\n-\n-    const handleFetchErrorReset = () => {\n-        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n-    };\n-\n-    const handleFieldChange = (e) => {\n-        const { name, value } = e.target;\n-        dispatch(formActions.setFormData({ name, value }));\n-        liveValidation(e.target);\n-    };\n-\n-    return {\n-        formData,\n-        formErrors,\n-        loading,\n-        fetchError,\n-        liveValidation,\n-        handleCustomInputSelection,\n-        handleSubmit,\n-        handleFetchErrorReset,\n-        handleFieldChange,\n-    };\n-}\n-\n-```\n-\n-&nbsp;\n-\n--   **Custom Select**: Offers both search and select function with keys.\n-\n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n-\n-&nbsp;\n-\n--   **Error handling**: Offers fetch error handling.\n-\n-![error handling](src/assets/gif/fetch-error-handling.gif)\n-\n-&nbsp;\n-\n-## 💭 Possible future features\n-\n--   **Filtering by month/year, biggest gain/loss**\n-\n-&nbsp;\n-\n-## 🙋‍♂️ Feel free to contact me\n-\n-Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n-\n-&nbsp;\n-\n-## 👏 Thanks / Special thanks / Credits\n-\n-Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n-![application presentation](src/assets/gif/add-transaction.gif)\n-\n-# React Custom Table\n-\n-The React Table application is a dynamic and interactive web application designed to demonstrate the implementation of table features, including custom pagination and API data fetching. Built with React, it serves as an educational tool for practicing test-driven development using the React Testing Library, focusing on writing effective unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n-\n-**Main features**:\n-\n-1. **API Rate Fetching**\n-   - Integrates with APIs for real-time and historical currency exchange rates.\n-   - Ensures accurate financial data for each transaction.\n-\n-2. **Live Transaction Validation**\n-   - Performs live validation during transaction entry.\n-\n-3. **ChartJS 2 Integration**\n-   - Uses ChartJS 2 for visual representation of financial data.\n-   - Provides clear, interactive charts to display profit or loss.\n-\n-4. **Redux Toolkit**\n-   - Employs Redux Toolkit for efficient state management.\n-\n-5. **Dark Mode**\n-   - Offers a user-friendly dark mode.\n-   - Reduces eye strain and provides an alternative aesthetic.\n-\n-6. **Custom Hooks for Form**\n-   - Custom hooks enhance form handling and selection options.\n-\n-7. **Local Storage**\n-   - Stores user data and preferences locally.\n-   - Allows for persistent user experiences and quick data retrieval.\n-\n-&nbsp;\n-\n-## 💡 Technologies\n-\n-![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n-![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n-![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n-![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n-![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n-![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n-![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n-![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n-\n-&nbsp;\n-\n-## 💿 Installation\n-\n-The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n-\n-1. **Install Dependencies**\n-   - Open your terminal.\n-   - Navigate to the project's root directory.\n-   - Type `npm i` to install the necessary packages.\n-\n-2. **API Key Setup**\n-   - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n-   - In the `src` folder of the project, create a file named `API_KEY.js`.\n-   - Inside `API_KEY.js`, export the API key as follows:\n-\n-     ```javascript\n-     const API_KEY = 'your_api_key_here';\n-     export default API_KEY;\n-     ```\n-\n-   - Replace `your_api_key_here` with the actual API key you obtained.\n-\n-By following these steps, you will set up the necessary environment and API access for the application.\n-\n-\n-\n-&nbsp;\n-\n-## 🤔 Solutions provided in the project\n-\n-**Custom Hook for the form component**\n-\n-```javascript \n-function useForm() {\n-    const { formData, formErrors } = useSelector((store) => store.form);\n-    const { loading, error: fetchError } = useSelector((store) => store.currency.historical);\n-    const dispatch = useDispatch();\n-\n-    useEffect(() => {\n-        if (formData.date !== '' && formData.currency !== '') {\n-            const [dateString] = formData.date.split('T');\n-            const [_, currencyString] = formData.currency.split(' ');\n-\n-            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n-        }\n-    }, [formData.date, formData.currency]);\n-\n-    const liveValidation = (input) => {\n-        const { name } = input;\n-        const errorInState = formErrors[name];\n-        if (!errorInState) return;\n-\n-        const inputError = h.validate(db.formFields, [input]);\n-        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n-        if (!isErrorObjEmpty) return;\n-\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleCustomInputSelection = (name, value) => {\n-        dispatch(formActions.setFormData({ name, value }));\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleSubmit = (e) => {\n-        e.preventDefault();\n-\n-        const form = e.target;\n-\n-        // input validation\n-        const inputElements = h.findInputElementsInForm(form);\n-        const fieldErrors = h.validate(db.formFields, inputElements);\n-\n-        // custom validation\n-        const customInputsErrors = h.customValidation(db.formFields, formData);\n-        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n-\n-        dispatch(formActions.setErrors(updatedErrors));\n-\n-        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n-        if (!isFormClean) {\n-            return;\n-        }\n-\n-        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n-        dispatch(formActions.resetForm());\n-    };\n-\n-    const handleFetchErrorReset = () => {\n-        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n-    };\n-\n-    const handleFieldChange = (e) => {\n-        const { name, value } = e.target;\n-        dispatch(formActions.setFormData({ name, value }));\n-        liveValidation(e.target);\n-    };\n-\n-    return {\n-        formData,\n-        formErrors,\n-        loading,\n-        fetchError,\n-        liveValidation,\n-        handleCustomInputSelection,\n-        handleSubmit,\n-        handleFetchErrorReset,\n-        handleFieldChange,\n-    };\n-}\n-\n-```\n-\n-&nbsp;\n-\n--   **Custom Select**: Offers both search and select function with keys.\n-\n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n-\n-&nbsp;\n-\n--   **Error handling**: Offers fetch error handling.\n-\n-![error handling](src/assets/gif/fetch-error-handling.gif)\n-\n-&nbsp;\n-\n-## 💭 Possible future features\n-\n--   **Filtering by month/year, biggest gain/loss**\n-\n-&nbsp;\n-\n-## 🙋‍♂️ Feel free to contact me\n-\n-Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n-\n-&nbsp;\n-\n-## 👏 Thanks / Special thanks / Credits\n-\n-Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218107752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n ![application presentation](src/assets/gif/add-transaction.gif)\n \n # React Custom Table\n \n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests. The application showcases practical examples of fetching data from a simple API, rendering it in a table format, and navigating through the data set with a custom-built pagination component.\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests. \n \n **Main features**:\n \n 1. **API Rate Fetching**\n"
                },
                {
                    "date": 1706218148043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,42 @@\n ![application presentation](src/assets/gif/add-transaction.gif)\n \n # React Custom Table\n \n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests. \n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n \n **Main features**:\n \n-1. **API Rate Fetching**\n-   - Integrates with APIs for real-time and historical currency exchange rates.\n-   - Ensures accurate financial data for each transaction.\n+1. **Custom table C**\n \n+    - Integrates with APIs for real-time and historical currency exchange rates.\n+    - Ensures accurate financial data for each transaction.\n+\n 2. **Live Transaction Validation**\n-   - Performs live validation during transaction entry.\n \n+    - Performs live validation during transaction entry.\n+\n 3. **ChartJS 2 Integration**\n-   - Uses ChartJS 2 for visual representation of financial data.\n-   - Provides clear, interactive charts to display profit or loss.\n \n+    - Uses ChartJS 2 for visual representation of financial data.\n+    - Provides clear, interactive charts to display profit or loss.\n+\n 4. **Redux Toolkit**\n-   - Employs Redux Toolkit for efficient state management.\n \n+    - Employs Redux Toolkit for efficient state management.\n+\n 5. **Dark Mode**\n-   - Offers a user-friendly dark mode.\n-   - Reduces eye strain and provides an alternative aesthetic.\n \n+    - Offers a user-friendly dark mode.\n+    - Reduces eye strain and provides an alternative aesthetic.\n+\n 6. **Custom Hooks for Form**\n-   - Custom hooks enhance form handling and selection options.\n \n+    - Custom hooks enhance form handling and selection options.\n+\n 7. **Local Storage**\n-   - Stores user data and preferences locally.\n-   - Allows for persistent user experiences and quick data retrieval.\n+    - Stores user data and preferences locally.\n+    - Allows for persistent user experiences and quick data retrieval.\n \n &nbsp;\n \n ## 💡 Technologies\n@@ -51,38 +57,38 @@\n \n The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n \n 1. **Install Dependencies**\n-   - Open your terminal.\n-   - Navigate to the project's root directory.\n-   - Type `npm i` to install the necessary packages.\n \n+    - Open your terminal.\n+    - Navigate to the project's root directory.\n+    - Type `npm i` to install the necessary packages.\n+\n 2. **API Key Setup**\n-   - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n-   - In the `src` folder of the project, create a file named `API_KEY.js`.\n-   - Inside `API_KEY.js`, export the API key as follows:\n \n-     ```javascript\n-     const API_KEY = 'your_api_key_here';\n-     export default API_KEY;\n-     ```\n+    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n+    - In the `src` folder of the project, create a file named `API_KEY.js`.\n+    - Inside `API_KEY.js`, export the API key as follows:\n \n-   - Replace `your_api_key_here` with the actual API key you obtained.\n+        ```javascript\n+        const API_KEY = 'your_api_key_here';\n+        export default API_KEY;\n+        ```\n \n+    - Replace `your_api_key_here` with the actual API key you obtained.\n+\n By following these steps, you will set up the necessary environment and API access for the application.\n \n-\n-\n &nbsp;\n \n ## 🤔 Solutions provided in the project\n \n **Custom Hook for the form component**\n \n-```javascript \n+```javascript\n function useForm() {\n-    const { formData, formErrors } = useSelector((store) => store.form);\n-    const { loading, error: fetchError } = useSelector((store) => store.currency.historical);\n+    const { formData, formErrors } = useSelector(store => store.form);\n+    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n     const dispatch = useDispatch();\n \n     useEffect(() => {\n         if (formData.date !== '' && formData.currency !== '') {\n@@ -92,9 +98,9 @@\n             dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n         }\n     }, [formData.date, formData.currency]);\n \n-    const liveValidation = (input) => {\n+    const liveValidation = input => {\n         const { name } = input;\n         const errorInState = formErrors[name];\n         if (!errorInState) return;\n \n@@ -109,9 +115,9 @@\n         dispatch(formActions.setFormData({ name, value }));\n         dispatch(formActions.removeError({ name }));\n     };\n \n-    const handleSubmit = (e) => {\n+    const handleSubmit = e => {\n         e.preventDefault();\n \n         const form = e.target;\n \n@@ -137,9 +143,9 @@\n     const handleFetchErrorReset = () => {\n         dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n     };\n \n-    const handleFieldChange = (e) => {\n+    const handleFieldChange = e => {\n         const { name, value } = e.target;\n         dispatch(formActions.setFormData({ name, value }));\n         liveValidation(e.target);\n     };\n@@ -155,9 +161,8 @@\n         handleFetchErrorReset,\n         handleFieldChange,\n     };\n }\n-\n ```\n \n &nbsp;\n \n"
                },
                {
                    "date": 1706218161194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n \n **Main features**:\n \n-1. **Custom table C**\n+1. **Easy to implement custom **\n \n     - Integrates with APIs for real-time and historical currency exchange rates.\n     - Ensures accurate financial data for each transaction.\n \n"
                },
                {
                    "date": 1706218168029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+![application presentation](src/assets/gif/add-transaction.gif)\n+\n+# React Custom Table\n+\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n+\n+**Main features**:\n+\n+1. **Easy to implement custom table component**\n+\n+    - Integrates with APIs for real-time and historical currency exchange rates.\n+    - Ensures accurate financial data for each transaction.\n+\n+2. **Live Transaction Validation**\n+\n+    - Performs live validation during transaction entry.\n+\n+3. **ChartJS 2 Integration**\n+\n+    - Uses ChartJS 2 for visual representation of financial data.\n+    - Provides clear, interactive charts to display profit or loss.\n+\n+4. **Redux Toolkit**\n+\n+    - Employs Redux Toolkit for efficient state management.\n+\n+5. **Dark Mode**\n+\n+    - Offers a user-friendly dark mode.\n+    - Reduces eye strain and provides an alternative aesthetic.\n+\n+6. **Custom Hooks for Form**\n+\n+    - Custom hooks enhance form handling and selection options.\n+\n+7. **Local Storage**\n+    - Stores user data and preferences locally.\n+    - Allows for persistent user experiences and quick data retrieval.\n+\n+&nbsp;\n+\n+## 💡 Technologies\n+\n+![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n+![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n+![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n+![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n+![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n+![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n+![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n+![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n+\n+&nbsp;\n+\n+## 💿 Installation\n+\n+The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n+\n+1. **Install Dependencies**\n+\n+    - Open your terminal.\n+    - Navigate to the project's root directory.\n+    - Type `npm i` to install the necessary packages.\n+\n+2. **API Key Setup**\n+\n+    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n+    - In the `src` folder of the project, create a file named `API_KEY.js`.\n+    - Inside `API_KEY.js`, export the API key as follows:\n+\n+        ```javascript\n+        const API_KEY = 'your_api_key_here';\n+        export default API_KEY;\n+        ```\n+\n+    - Replace `your_api_key_here` with the actual API key you obtained.\n+\n+By following these steps, you will set up the necessary environment and API access for the application.\n+\n+&nbsp;\n+\n+## 🤔 Solutions provided in the project\n+\n+**Custom Hook for the form component**\n+\n+```javascript\n+function useForm() {\n+    const { formData, formErrors } = useSelector(store => store.form);\n+    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n+    const dispatch = useDispatch();\n+\n+    useEffect(() => {\n+        if (formData.date !== '' && formData.currency !== '') {\n+            const [dateString] = formData.date.split('T');\n+            const [_, currencyString] = formData.currency.split(' ');\n+\n+            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n+        }\n+    }, [formData.date, formData.currency]);\n+\n+    const liveValidation = input => {\n+        const { name } = input;\n+        const errorInState = formErrors[name];\n+        if (!errorInState) return;\n+\n+        const inputError = h.validate(db.formFields, [input]);\n+        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n+        if (!isErrorObjEmpty) return;\n+\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleCustomInputSelection = (name, value) => {\n+        dispatch(formActions.setFormData({ name, value }));\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleSubmit = e => {\n+        e.preventDefault();\n+\n+        const form = e.target;\n+\n+        // input validation\n+        const inputElements = h.findInputElementsInForm(form);\n+        const fieldErrors = h.validate(db.formFields, inputElements);\n+\n+        // custom validation\n+        const customInputsErrors = h.customValidation(db.formFields, formData);\n+        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n+\n+        dispatch(formActions.setErrors(updatedErrors));\n+\n+        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n+        if (!isFormClean) {\n+            return;\n+        }\n+\n+        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n+        dispatch(formActions.resetForm());\n+    };\n+\n+    const handleFetchErrorReset = () => {\n+        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n+    };\n+\n+    const handleFieldChange = e => {\n+        const { name, value } = e.target;\n+        dispatch(formActions.setFormData({ name, value }));\n+        liveValidation(e.target);\n+    };\n+\n+    return {\n+        formData,\n+        formErrors,\n+        loading,\n+        fetchError,\n+        liveValidation,\n+        handleCustomInputSelection,\n+        handleSubmit,\n+        handleFetchErrorReset,\n+        handleFieldChange,\n+    };\n+}\n+```\n+\n+&nbsp;\n+\n+-   **Custom Select**: Offers both search and select function with keys.\n+\n+![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+\n+&nbsp;\n+\n+-   **Error handling**: Offers fetch error handling.\n+\n+![error handling](src/assets/gif/fetch-error-handling.gif)\n+\n+&nbsp;\n+\n+## 💭 Possible future features\n+\n+-   **Filtering by month/year, biggest gain/loss**\n+\n+&nbsp;\n+\n+## 🙋‍♂️ Feel free to contact me\n+\n+Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n+\n+&nbsp;\n+\n+## 👏 Thanks / Special thanks / Credits\n+\n+Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218186874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,8 @@\n **Main features**:\n \n 1. **Easy to implement custom table component**\n \n-    - Integrates with APIs for real-time and historical currency exchange rates.\n-    - Ensures accurate financial data for each transaction.\n-\n 2. **Live Transaction Validation**\n \n     - Performs live validation during transaction entry.\n \n@@ -192,199 +189,4 @@\n \n ## 👏 Thanks / Special thanks / Credits\n \n Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n-![application presentation](src/assets/gif/add-transaction.gif)\n-\n-# React Custom Table\n-\n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n-\n-**Main features**:\n-\n-1. **Easy to implement custom **\n-\n-    - Integrates with APIs for real-time and historical currency exchange rates.\n-    - Ensures accurate financial data for each transaction.\n-\n-2. **Live Transaction Validation**\n-\n-    - Performs live validation during transaction entry.\n-\n-3. **ChartJS 2 Integration**\n-\n-    - Uses ChartJS 2 for visual representation of financial data.\n-    - Provides clear, interactive charts to display profit or loss.\n-\n-4. **Redux Toolkit**\n-\n-    - Employs Redux Toolkit for efficient state management.\n-\n-5. **Dark Mode**\n-\n-    - Offers a user-friendly dark mode.\n-    - Reduces eye strain and provides an alternative aesthetic.\n-\n-6. **Custom Hooks for Form**\n-\n-    - Custom hooks enhance form handling and selection options.\n-\n-7. **Local Storage**\n-    - Stores user data and preferences locally.\n-    - Allows for persistent user experiences and quick data retrieval.\n-\n-&nbsp;\n-\n-## 💡 Technologies\n-\n-![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n-![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n-![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n-![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n-![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n-![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n-![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n-![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n-\n-&nbsp;\n-\n-## 💿 Installation\n-\n-The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n-\n-1. **Install Dependencies**\n-\n-    - Open your terminal.\n-    - Navigate to the project's root directory.\n-    - Type `npm i` to install the necessary packages.\n-\n-2. **API Key Setup**\n-\n-    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n-    - In the `src` folder of the project, create a file named `API_KEY.js`.\n-    - Inside `API_KEY.js`, export the API key as follows:\n-\n-        ```javascript\n-        const API_KEY = 'your_api_key_here';\n-        export default API_KEY;\n-        ```\n-\n-    - Replace `your_api_key_here` with the actual API key you obtained.\n-\n-By following these steps, you will set up the necessary environment and API access for the application.\n-\n-&nbsp;\n-\n-## 🤔 Solutions provided in the project\n-\n-**Custom Hook for the form component**\n-\n-```javascript\n-function useForm() {\n-    const { formData, formErrors } = useSelector(store => store.form);\n-    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n-    const dispatch = useDispatch();\n-\n-    useEffect(() => {\n-        if (formData.date !== '' && formData.currency !== '') {\n-            const [dateString] = formData.date.split('T');\n-            const [_, currencyString] = formData.currency.split(' ');\n-\n-            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n-        }\n-    }, [formData.date, formData.currency]);\n-\n-    const liveValidation = input => {\n-        const { name } = input;\n-        const errorInState = formErrors[name];\n-        if (!errorInState) return;\n-\n-        const inputError = h.validate(db.formFields, [input]);\n-        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n-        if (!isErrorObjEmpty) return;\n-\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleCustomInputSelection = (name, value) => {\n-        dispatch(formActions.setFormData({ name, value }));\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleSubmit = e => {\n-        e.preventDefault();\n-\n-        const form = e.target;\n-\n-        // input validation\n-        const inputElements = h.findInputElementsInForm(form);\n-        const fieldErrors = h.validate(db.formFields, inputElements);\n-\n-        // custom validation\n-        const customInputsErrors = h.customValidation(db.formFields, formData);\n-        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n-\n-        dispatch(formActions.setErrors(updatedErrors));\n-\n-        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n-        if (!isFormClean) {\n-            return;\n-        }\n-\n-        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n-        dispatch(formActions.resetForm());\n-    };\n-\n-    const handleFetchErrorReset = () => {\n-        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n-    };\n-\n-    const handleFieldChange = e => {\n-        const { name, value } = e.target;\n-        dispatch(formActions.setFormData({ name, value }));\n-        liveValidation(e.target);\n-    };\n-\n-    return {\n-        formData,\n-        formErrors,\n-        loading,\n-        fetchError,\n-        liveValidation,\n-        handleCustomInputSelection,\n-        handleSubmit,\n-        handleFetchErrorReset,\n-        handleFieldChange,\n-    };\n-}\n-```\n-\n-&nbsp;\n-\n--   **Custom Select**: Offers both search and select function with keys.\n-\n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n-\n-&nbsp;\n-\n--   **Error handling**: Offers fetch error handling.\n-\n-![error handling](src/assets/gif/fetch-error-handling.gif)\n-\n-&nbsp;\n-\n-## 💭 Possible future features\n-\n--   **Filtering by month/year, biggest gain/loss**\n-\n-&nbsp;\n-\n-## 🙋‍♂️ Feel free to contact me\n-\n-Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n-\n-&nbsp;\n-\n-## 👏 Thanks / Special thanks / Credits\n-\n-Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218195401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,192 @@\n+![application presentation](src/assets/gif/add-transaction.gif)\n+\n+# React Custom Table\n+\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n+\n+**Main features**:\n+\n+1. **Easy to implement custom table component**\n+\n+2. **Custom **\n+\n+    - Performs live validation during transaction entry.\n+\n+3. **ChartJS 2 Integration**\n+\n+    - Uses ChartJS 2 for visual representation of financial data.\n+    - Provides clear, interactive charts to display profit or loss.\n+\n+4. **Redux Toolkit**\n+\n+    - Employs Redux Toolkit for efficient state management.\n+\n+5. **Dark Mode**\n+\n+    - Offers a user-friendly dark mode.\n+    - Reduces eye strain and provides an alternative aesthetic.\n+\n+6. **Custom Hooks for Form**\n+\n+    - Custom hooks enhance form handling and selection options.\n+\n+7. **Local Storage**\n+    - Stores user data and preferences locally.\n+    - Allows for persistent user experiences and quick data retrieval.\n+\n+&nbsp;\n+\n+## 💡 Technologies\n+\n+![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n+![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n+![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n+![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n+![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n+![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n+![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n+![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n+\n+&nbsp;\n+\n+## 💿 Installation\n+\n+The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n+\n+1. **Install Dependencies**\n+\n+    - Open your terminal.\n+    - Navigate to the project's root directory.\n+    - Type `npm i` to install the necessary packages.\n+\n+2. **API Key Setup**\n+\n+    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n+    - In the `src` folder of the project, create a file named `API_KEY.js`.\n+    - Inside `API_KEY.js`, export the API key as follows:\n+\n+        ```javascript\n+        const API_KEY = 'your_api_key_here';\n+        export default API_KEY;\n+        ```\n+\n+    - Replace `your_api_key_here` with the actual API key you obtained.\n+\n+By following these steps, you will set up the necessary environment and API access for the application.\n+\n+&nbsp;\n+\n+## 🤔 Solutions provided in the project\n+\n+**Custom Hook for the form component**\n+\n+```javascript\n+function useForm() {\n+    const { formData, formErrors } = useSelector(store => store.form);\n+    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n+    const dispatch = useDispatch();\n+\n+    useEffect(() => {\n+        if (formData.date !== '' && formData.currency !== '') {\n+            const [dateString] = formData.date.split('T');\n+            const [_, currencyString] = formData.currency.split(' ');\n+\n+            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n+        }\n+    }, [formData.date, formData.currency]);\n+\n+    const liveValidation = input => {\n+        const { name } = input;\n+        const errorInState = formErrors[name];\n+        if (!errorInState) return;\n+\n+        const inputError = h.validate(db.formFields, [input]);\n+        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n+        if (!isErrorObjEmpty) return;\n+\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleCustomInputSelection = (name, value) => {\n+        dispatch(formActions.setFormData({ name, value }));\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleSubmit = e => {\n+        e.preventDefault();\n+\n+        const form = e.target;\n+\n+        // input validation\n+        const inputElements = h.findInputElementsInForm(form);\n+        const fieldErrors = h.validate(db.formFields, inputElements);\n+\n+        // custom validation\n+        const customInputsErrors = h.customValidation(db.formFields, formData);\n+        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n+\n+        dispatch(formActions.setErrors(updatedErrors));\n+\n+        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n+        if (!isFormClean) {\n+            return;\n+        }\n+\n+        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n+        dispatch(formActions.resetForm());\n+    };\n+\n+    const handleFetchErrorReset = () => {\n+        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n+    };\n+\n+    const handleFieldChange = e => {\n+        const { name, value } = e.target;\n+        dispatch(formActions.setFormData({ name, value }));\n+        liveValidation(e.target);\n+    };\n+\n+    return {\n+        formData,\n+        formErrors,\n+        loading,\n+        fetchError,\n+        liveValidation,\n+        handleCustomInputSelection,\n+        handleSubmit,\n+        handleFetchErrorReset,\n+        handleFieldChange,\n+    };\n+}\n+```\n+\n+&nbsp;\n+\n+-   **Custom Select**: Offers both search and select function with keys.\n+\n+![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+\n+&nbsp;\n+\n+-   **Error handling**: Offers fetch error handling.\n+\n+![error handling](src/assets/gif/fetch-error-handling.gif)\n+\n+&nbsp;\n+\n+## 💭 Possible future features\n+\n+-   **Filtering by month/year, biggest gain/loss**\n+\n+&nbsp;\n+\n+## 🙋‍♂️ Feel free to contact me\n+\n+Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n+\n+&nbsp;\n+\n+## 👏 Thanks / Special thanks / Credits\n+\n+Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218205050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n **Main features**:\n \n 1. **Easy to implement custom table component**\n \n-2. **Custom **\n+2. **Custom pagination implementation**\n \n     - Performs live validation during transaction entry.\n \n 3. **ChartJS 2 Integration**\n@@ -189,196 +189,4 @@\n \n ## 👏 Thanks / Special thanks / Credits\n \n Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n-![application presentation](src/assets/gif/add-transaction.gif)\n-\n-# React Custom Table\n-\n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n-\n-**Main features**:\n-\n-1. **Easy to implement custom table component**\n-\n-2. **Live Transaction Validation**\n-\n-    - Performs live validation during transaction entry.\n-\n-3. **ChartJS 2 Integration**\n-\n-    - Uses ChartJS 2 for visual representation of financial data.\n-    - Provides clear, interactive charts to display profit or loss.\n-\n-4. **Redux Toolkit**\n-\n-    - Employs Redux Toolkit for efficient state management.\n-\n-5. **Dark Mode**\n-\n-    - Offers a user-friendly dark mode.\n-    - Reduces eye strain and provides an alternative aesthetic.\n-\n-6. **Custom Hooks for Form**\n-\n-    - Custom hooks enhance form handling and selection options.\n-\n-7. **Local Storage**\n-    - Stores user data and preferences locally.\n-    - Allows for persistent user experiences and quick data retrieval.\n-\n-&nbsp;\n-\n-## 💡 Technologies\n-\n-![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n-![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n-![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n-![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n-![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n-![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n-![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n-![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n-\n-&nbsp;\n-\n-## 💿 Installation\n-\n-The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n-\n-1. **Install Dependencies**\n-\n-    - Open your terminal.\n-    - Navigate to the project's root directory.\n-    - Type `npm i` to install the necessary packages.\n-\n-2. **API Key Setup**\n-\n-    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n-    - In the `src` folder of the project, create a file named `API_KEY.js`.\n-    - Inside `API_KEY.js`, export the API key as follows:\n-\n-        ```javascript\n-        const API_KEY = 'your_api_key_here';\n-        export default API_KEY;\n-        ```\n-\n-    - Replace `your_api_key_here` with the actual API key you obtained.\n-\n-By following these steps, you will set up the necessary environment and API access for the application.\n-\n-&nbsp;\n-\n-## 🤔 Solutions provided in the project\n-\n-**Custom Hook for the form component**\n-\n-```javascript\n-function useForm() {\n-    const { formData, formErrors } = useSelector(store => store.form);\n-    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n-    const dispatch = useDispatch();\n-\n-    useEffect(() => {\n-        if (formData.date !== '' && formData.currency !== '') {\n-            const [dateString] = formData.date.split('T');\n-            const [_, currencyString] = formData.currency.split(' ');\n-\n-            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n-        }\n-    }, [formData.date, formData.currency]);\n-\n-    const liveValidation = input => {\n-        const { name } = input;\n-        const errorInState = formErrors[name];\n-        if (!errorInState) return;\n-\n-        const inputError = h.validate(db.formFields, [input]);\n-        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n-        if (!isErrorObjEmpty) return;\n-\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleCustomInputSelection = (name, value) => {\n-        dispatch(formActions.setFormData({ name, value }));\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleSubmit = e => {\n-        e.preventDefault();\n-\n-        const form = e.target;\n-\n-        // input validation\n-        const inputElements = h.findInputElementsInForm(form);\n-        const fieldErrors = h.validate(db.formFields, inputElements);\n-\n-        // custom validation\n-        const customInputsErrors = h.customValidation(db.formFields, formData);\n-        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n-\n-        dispatch(formActions.setErrors(updatedErrors));\n-\n-        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n-        if (!isFormClean) {\n-            return;\n-        }\n-\n-        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n-        dispatch(formActions.resetForm());\n-    };\n-\n-    const handleFetchErrorReset = () => {\n-        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n-    };\n-\n-    const handleFieldChange = e => {\n-        const { name, value } = e.target;\n-        dispatch(formActions.setFormData({ name, value }));\n-        liveValidation(e.target);\n-    };\n-\n-    return {\n-        formData,\n-        formErrors,\n-        loading,\n-        fetchError,\n-        liveValidation,\n-        handleCustomInputSelection,\n-        handleSubmit,\n-        handleFetchErrorReset,\n-        handleFieldChange,\n-    };\n-}\n-```\n-\n-&nbsp;\n-\n--   **Custom Select**: Offers both search and select function with keys.\n-\n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n-\n-&nbsp;\n-\n--   **Error handling**: Offers fetch error handling.\n-\n-![error handling](src/assets/gif/fetch-error-handling.gif)\n-\n-&nbsp;\n-\n-## 💭 Possible future features\n-\n--   **Filtering by month/year, biggest gain/loss**\n-\n-&nbsp;\n-\n-## 🙋‍♂️ Feel free to contact me\n-\n-Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n-\n-&nbsp;\n-\n-## 👏 Thanks / Special thanks / Credits\n-\n-Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218212816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,8 @@\n 1. **Easy to implement custom table component**\n \n 2. **Custom pagination implementation**\n \n-    - Performs live validation during transaction entry.\n-\n 3. **ChartJS 2 Integration**\n \n     - Uses ChartJS 2 for visual representation of financial data.\n     - Provides clear, interactive charts to display profit or loss.\n"
                },
                {
                    "date": 1706218228442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n 1. **Easy to implement custom table component**\n \n 2. **Custom pagination implementation**\n \n-3. **ChartJS 2 Integration**\n+3. **Unit and **\n \n     - Uses ChartJS 2 for visual representation of financial data.\n     - Provides clear, interactive charts to display profit or loss.\n \n"
                },
                {
                    "date": 1706218237968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,10 @@\n 1. **Easy to implement custom table component**\n \n 2. **Custom pagination implementation**\n \n-3. **Unit and **\n+3. **Unit and integration tests**\n \n-    - Uses ChartJS 2 for visual representation of financial data.\n-    - Provides clear, interactive charts to display profit or loss.\n-\n 4. **Redux Toolkit**\n \n     - Employs Redux Toolkit for efficient state management.\n \n"
                },
                {
                    "date": 1706218246541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+![application presentation](src/assets/gif/add-transaction.gif)\n+\n+# React Custom Table\n+\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n+\n+**Main features**:\n+\n+1. **Easy to implement custom table component**\n+\n+2. **Custom pagination implementation**\n+\n+3. **Unit and integration tests**\n+\n+    - Uses ChartJS 2 for visual representation of financial data.\n+    - Provides clear, interactive charts to display profit or loss.\n+\n+4. **Redux Toolkit**\n+\n+    - Employs Redux Toolkit for efficient state management.\n+\n+5. **Dark Mode**\n+\n+    - Offers a user-friendly dark mode.\n+    - Reduces eye strain and provides an alternative aesthetic.\n+\n+6. **Custom Hooks for Form**\n+\n+    - Custom hooks enhance form handling and selection options.\n+\n+7. **Local Storage**\n+    - Stores user data and preferences locally.\n+    - Allows for persistent user experiences and quick data retrieval.\n+\n+&nbsp;\n+\n+## 💡 Technologies\n+\n+![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n+![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n+![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n+![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n+![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n+![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n+![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n+![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n+\n+&nbsp;\n+\n+## 💿 Installation\n+\n+The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n+\n+1. **Install Dependencies**\n+\n+    - Open your terminal.\n+    - Navigate to the project's root directory.\n+    - Type `npm i` to install the necessary packages.\n+\n+2. **API Key Setup**\n+\n+    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n+    - In the `src` folder of the project, create a file named `API_KEY.js`.\n+    - Inside `API_KEY.js`, export the API key as follows:\n+\n+        ```javascript\n+        const API_KEY = 'your_api_key_here';\n+        export default API_KEY;\n+        ```\n+\n+    - Replace `your_api_key_here` with the actual API key you obtained.\n+\n+By following these steps, you will set up the necessary environment and API access for the application.\n+\n+&nbsp;\n+\n+## 🤔 Solutions provided in the project\n+\n+**Custom Hook for the form component**\n+\n+```javascript\n+function useForm() {\n+    const { formData, formErrors } = useSelector(store => store.form);\n+    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n+    const dispatch = useDispatch();\n+\n+    useEffect(() => {\n+        if (formData.date !== '' && formData.currency !== '') {\n+            const [dateString] = formData.date.split('T');\n+            const [_, currencyString] = formData.currency.split(' ');\n+\n+            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n+        }\n+    }, [formData.date, formData.currency]);\n+\n+    const liveValidation = input => {\n+        const { name } = input;\n+        const errorInState = formErrors[name];\n+        if (!errorInState) return;\n+\n+        const inputError = h.validate(db.formFields, [input]);\n+        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n+        if (!isErrorObjEmpty) return;\n+\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleCustomInputSelection = (name, value) => {\n+        dispatch(formActions.setFormData({ name, value }));\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleSubmit = e => {\n+        e.preventDefault();\n+\n+        const form = e.target;\n+\n+        // input validation\n+        const inputElements = h.findInputElementsInForm(form);\n+        const fieldErrors = h.validate(db.formFields, inputElements);\n+\n+        // custom validation\n+        const customInputsErrors = h.customValidation(db.formFields, formData);\n+        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n+\n+        dispatch(formActions.setErrors(updatedErrors));\n+\n+        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n+        if (!isFormClean) {\n+            return;\n+        }\n+\n+        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n+        dispatch(formActions.resetForm());\n+    };\n+\n+    const handleFetchErrorReset = () => {\n+        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n+    };\n+\n+    const handleFieldChange = e => {\n+        const { name, value } = e.target;\n+        dispatch(formActions.setFormData({ name, value }));\n+        liveValidation(e.target);\n+    };\n+\n+    return {\n+        formData,\n+        formErrors,\n+        loading,\n+        fetchError,\n+        liveValidation,\n+        handleCustomInputSelection,\n+        handleSubmit,\n+        handleFetchErrorReset,\n+        handleFieldChange,\n+    };\n+}\n+```\n+\n+&nbsp;\n+\n+-   **Custom Select**: Offers both search and select function with keys.\n+\n+![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+\n+&nbsp;\n+\n+-   **Error handling**: Offers fetch error handling.\n+\n+![error handling](src/assets/gif/fetch-error-handling.gif)\n+\n+&nbsp;\n+\n+## 💭 Possible future features\n+\n+-   **Filtering by month/year, biggest gain/loss**\n+\n+&nbsp;\n+\n+## 🙋‍♂️ Feel free to contact me\n+\n+Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n+\n+&nbsp;\n+\n+## 👏 Thanks / Special thanks / Credits\n+\n+Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218330950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n 2. **Custom pagination implementation**\n \n 3. **Unit and integration tests**\n \n-    - Uses ChartJS 2 for visual representation of financial data.\n+    - Includes spyOn and .\n     - Provides clear, interactive charts to display profit or loss.\n \n 4. **Redux Toolkit**\n \n@@ -187,191 +187,4 @@\n \n ## 👏 Thanks / Special thanks / Credits\n \n Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n-![application presentation](src/assets/gif/add-transaction.gif)\n-\n-# React Custom Table\n-\n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n-\n-**Main features**:\n-\n-1. **Easy to implement custom table component**\n-\n-2. **Custom pagination implementation**\n-\n-3. **Unit and integration tests**\n-\n-4. **Redux Toolkit**\n-\n-    - Employs Redux Toolkit for efficient state management.\n-\n-5. **Dark Mode**\n-\n-    - Offers a user-friendly dark mode.\n-    - Reduces eye strain and provides an alternative aesthetic.\n-\n-6. **Custom Hooks for Form**\n-\n-    - Custom hooks enhance form handling and selection options.\n-\n-7. **Local Storage**\n-    - Stores user data and preferences locally.\n-    - Allows for persistent user experiences and quick data retrieval.\n-\n-&nbsp;\n-\n-## 💡 Technologies\n-\n-![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n-![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n-![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n-![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n-![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n-![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n-![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n-![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n-\n-&nbsp;\n-\n-## 💿 Installation\n-\n-The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n-\n-1. **Install Dependencies**\n-\n-    - Open your terminal.\n-    - Navigate to the project's root directory.\n-    - Type `npm i` to install the necessary packages.\n-\n-2. **API Key Setup**\n-\n-    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n-    - In the `src` folder of the project, create a file named `API_KEY.js`.\n-    - Inside `API_KEY.js`, export the API key as follows:\n-\n-        ```javascript\n-        const API_KEY = 'your_api_key_here';\n-        export default API_KEY;\n-        ```\n-\n-    - Replace `your_api_key_here` with the actual API key you obtained.\n-\n-By following these steps, you will set up the necessary environment and API access for the application.\n-\n-&nbsp;\n-\n-## 🤔 Solutions provided in the project\n-\n-**Custom Hook for the form component**\n-\n-```javascript\n-function useForm() {\n-    const { formData, formErrors } = useSelector(store => store.form);\n-    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n-    const dispatch = useDispatch();\n-\n-    useEffect(() => {\n-        if (formData.date !== '' && formData.currency !== '') {\n-            const [dateString] = formData.date.split('T');\n-            const [_, currencyString] = formData.currency.split(' ');\n-\n-            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n-        }\n-    }, [formData.date, formData.currency]);\n-\n-    const liveValidation = input => {\n-        const { name } = input;\n-        const errorInState = formErrors[name];\n-        if (!errorInState) return;\n-\n-        const inputError = h.validate(db.formFields, [input]);\n-        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n-        if (!isErrorObjEmpty) return;\n-\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleCustomInputSelection = (name, value) => {\n-        dispatch(formActions.setFormData({ name, value }));\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleSubmit = e => {\n-        e.preventDefault();\n-\n-        const form = e.target;\n-\n-        // input validation\n-        const inputElements = h.findInputElementsInForm(form);\n-        const fieldErrors = h.validate(db.formFields, inputElements);\n-\n-        // custom validation\n-        const customInputsErrors = h.customValidation(db.formFields, formData);\n-        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n-\n-        dispatch(formActions.setErrors(updatedErrors));\n-\n-        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n-        if (!isFormClean) {\n-            return;\n-        }\n-\n-        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n-        dispatch(formActions.resetForm());\n-    };\n-\n-    const handleFetchErrorReset = () => {\n-        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n-    };\n-\n-    const handleFieldChange = e => {\n-        const { name, value } = e.target;\n-        dispatch(formActions.setFormData({ name, value }));\n-        liveValidation(e.target);\n-    };\n-\n-    return {\n-        formData,\n-        formErrors,\n-        loading,\n-        fetchError,\n-        liveValidation,\n-        handleCustomInputSelection,\n-        handleSubmit,\n-        handleFetchErrorReset,\n-        handleFieldChange,\n-    };\n-}\n-```\n-\n-&nbsp;\n-\n--   **Custom Select**: Offers both search and select function with keys.\n-\n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n-\n-&nbsp;\n-\n--   **Error handling**: Offers fetch error handling.\n-\n-![error handling](src/assets/gif/fetch-error-handling.gif)\n-\n-&nbsp;\n-\n-## 💭 Possible future features\n-\n--   **Filtering by month/year, biggest gain/loss**\n-\n-&nbsp;\n-\n-## 🙋‍♂️ Feel free to contact me\n-\n-Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n-\n-&nbsp;\n-\n-## 👏 Thanks / Special thanks / Credits\n-\n-Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218352895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n 2. **Custom pagination implementation**\n \n 3. **Unit and integration tests**\n \n-    - Includes spyOn and .\n+    - Includes \"spyOn\" and mock .\n     - Provides clear, interactive charts to display profit or loss.\n \n 4. **Redux Toolkit**\n \n"
                },
                {
                    "date": 1706218359223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n 2. **Custom pagination implementation**\n \n 3. **Unit and integration tests**\n \n-    - Includes \"spyOn\" and mock .\n+    - Includes \"spyOn\" and \"mock\" usage.\n     - Provides clear, interactive charts to display profit or loss.\n \n 4. **Redux Toolkit**\n \n"
                },
                {
                    "date": 1706218372122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+![application presentation](src/assets/gif/add-transaction.gif)\n+\n+# React Custom Table\n+\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n+\n+**Main features**:\n+\n+1. **Easy to implement custom table component**\n+\n+2. **Custom pagination implementation**\n+\n+3. **Unit and integration tests**\n+\n+    - Includes \"spyOn\" and \"mock\" usage.\n+\n+4. **Redux Toolkit**\n+\n+    - Employs Redux Toolkit for efficient state management.\n+\n+5. **Dark Mode**\n+\n+    - Offers a user-friendly dark mode.\n+    - Reduces eye strain and provides an alternative aesthetic.\n+\n+6. **Custom Hooks for Form**\n+\n+    - Custom hooks enhance form handling and selection options.\n+\n+7. **Local Storage**\n+    - Stores user data and preferences locally.\n+    - Allows for persistent user experiences and quick data retrieval.\n+\n+&nbsp;\n+\n+## 💡 Technologies\n+\n+![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n+![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n+![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n+![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n+![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n+![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n+![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n+![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n+\n+&nbsp;\n+\n+## 💿 Installation\n+\n+The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n+\n+1. **Install Dependencies**\n+\n+    - Open your terminal.\n+    - Navigate to the project's root directory.\n+    - Type `npm i` to install the necessary packages.\n+\n+2. **API Key Setup**\n+\n+    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n+    - In the `src` folder of the project, create a file named `API_KEY.js`.\n+    - Inside `API_KEY.js`, export the API key as follows:\n+\n+        ```javascript\n+        const API_KEY = 'your_api_key_here';\n+        export default API_KEY;\n+        ```\n+\n+    - Replace `your_api_key_here` with the actual API key you obtained.\n+\n+By following these steps, you will set up the necessary environment and API access for the application.\n+\n+&nbsp;\n+\n+## 🤔 Solutions provided in the project\n+\n+**Custom Hook for the form component**\n+\n+```javascript\n+function useForm() {\n+    const { formData, formErrors } = useSelector(store => store.form);\n+    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n+    const dispatch = useDispatch();\n+\n+    useEffect(() => {\n+        if (formData.date !== '' && formData.currency !== '') {\n+            const [dateString] = formData.date.split('T');\n+            const [_, currencyString] = formData.currency.split(' ');\n+\n+            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n+        }\n+    }, [formData.date, formData.currency]);\n+\n+    const liveValidation = input => {\n+        const { name } = input;\n+        const errorInState = formErrors[name];\n+        if (!errorInState) return;\n+\n+        const inputError = h.validate(db.formFields, [input]);\n+        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n+        if (!isErrorObjEmpty) return;\n+\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleCustomInputSelection = (name, value) => {\n+        dispatch(formActions.setFormData({ name, value }));\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleSubmit = e => {\n+        e.preventDefault();\n+\n+        const form = e.target;\n+\n+        // input validation\n+        const inputElements = h.findInputElementsInForm(form);\n+        const fieldErrors = h.validate(db.formFields, inputElements);\n+\n+        // custom validation\n+        const customInputsErrors = h.customValidation(db.formFields, formData);\n+        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n+\n+        dispatch(formActions.setErrors(updatedErrors));\n+\n+        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n+        if (!isFormClean) {\n+            return;\n+        }\n+\n+        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n+        dispatch(formActions.resetForm());\n+    };\n+\n+    const handleFetchErrorReset = () => {\n+        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n+    };\n+\n+    const handleFieldChange = e => {\n+        const { name, value } = e.target;\n+        dispatch(formActions.setFormData({ name, value }));\n+        liveValidation(e.target);\n+    };\n+\n+    return {\n+        formData,\n+        formErrors,\n+        loading,\n+        fetchError,\n+        liveValidation,\n+        handleCustomInputSelection,\n+        handleSubmit,\n+        handleFetchErrorReset,\n+        handleFieldChange,\n+    };\n+}\n+```\n+\n+&nbsp;\n+\n+-   **Custom Select**: Offers both search and select function with keys.\n+\n+![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+\n+&nbsp;\n+\n+-   **Error handling**: Offers fetch error handling.\n+\n+![error handling](src/assets/gif/fetch-error-handling.gif)\n+\n+&nbsp;\n+\n+## 💭 Possible future features\n+\n+-   **Filtering by month/year, biggest gain/loss**\n+\n+&nbsp;\n+\n+## 🙋‍♂️ Feel free to contact me\n+\n+Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n+\n+&nbsp;\n+\n+## 👏 Thanks / Special thanks / Credits\n+\n+Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218383563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,25 +13,8 @@\n 3. **Unit and integration tests**\n \n     - Includes \"spyOn\" and \"mock\" usage.\n \n-4. **Redux Toolkit**\n-\n-    - Employs Redux Toolkit for efficient state management.\n-\n-5. **Dark Mode**\n-\n-    - Offers a user-friendly dark mode.\n-    - Reduces eye strain and provides an alternative aesthetic.\n-\n-6. **Custom Hooks for Form**\n-\n-    - Custom hooks enhance form handling and selection options.\n-\n-7. **Local Storage**\n-    - Stores user data and preferences locally.\n-    - Allows for persistent user experiences and quick data retrieval.\n-\n &nbsp;\n \n ## 💡 Technologies\n \n"
                },
                {
                    "date": 1706218406916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+![application presentation](https://photos.app.goo.gl/wdWsbPczgMTNCXxWA)\n+\n+# React Custom Table\n+\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n+\n+**Main features**:\n+\n+1. **Easy to implement custom table component**\n+\n+2. **Custom pagination implementation**\n+\n+3. **Unit and integration tests**\n+\n+    - Includes \"spyOn\" and \"mock\" usage.\n+\n+&nbsp;\n+\n+## 💡 Technologies\n+\n+![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n+![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n+![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n+![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n+![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n+![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n+![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n+![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n+\n+&nbsp;\n+\n+## 💿 Installation\n+\n+The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n+\n+1. **Install Dependencies**\n+\n+    - Open your terminal.\n+    - Navigate to the project's root directory.\n+    - Type `npm i` to install the necessary packages.\n+\n+2. **API Key Setup**\n+\n+    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n+    - In the `src` folder of the project, create a file named `API_KEY.js`.\n+    - Inside `API_KEY.js`, export the API key as follows:\n+\n+        ```javascript\n+        const API_KEY = 'your_api_key_here';\n+        export default API_KEY;\n+        ```\n+\n+    - Replace `your_api_key_here` with the actual API key you obtained.\n+\n+By following these steps, you will set up the necessary environment and API access for the application.\n+\n+&nbsp;\n+\n+## 🤔 Solutions provided in the project\n+\n+**Custom Hook for the form component**\n+\n+```javascript\n+function useForm() {\n+    const { formData, formErrors } = useSelector(store => store.form);\n+    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n+    const dispatch = useDispatch();\n+\n+    useEffect(() => {\n+        if (formData.date !== '' && formData.currency !== '') {\n+            const [dateString] = formData.date.split('T');\n+            const [_, currencyString] = formData.currency.split(' ');\n+\n+            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n+        }\n+    }, [formData.date, formData.currency]);\n+\n+    const liveValidation = input => {\n+        const { name } = input;\n+        const errorInState = formErrors[name];\n+        if (!errorInState) return;\n+\n+        const inputError = h.validate(db.formFields, [input]);\n+        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n+        if (!isErrorObjEmpty) return;\n+\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleCustomInputSelection = (name, value) => {\n+        dispatch(formActions.setFormData({ name, value }));\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleSubmit = e => {\n+        e.preventDefault();\n+\n+        const form = e.target;\n+\n+        // input validation\n+        const inputElements = h.findInputElementsInForm(form);\n+        const fieldErrors = h.validate(db.formFields, inputElements);\n+\n+        // custom validation\n+        const customInputsErrors = h.customValidation(db.formFields, formData);\n+        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n+\n+        dispatch(formActions.setErrors(updatedErrors));\n+\n+        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n+        if (!isFormClean) {\n+            return;\n+        }\n+\n+        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n+        dispatch(formActions.resetForm());\n+    };\n+\n+    const handleFetchErrorReset = () => {\n+        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n+    };\n+\n+    const handleFieldChange = e => {\n+        const { name, value } = e.target;\n+        dispatch(formActions.setFormData({ name, value }));\n+        liveValidation(e.target);\n+    };\n+\n+    return {\n+        formData,\n+        formErrors,\n+        loading,\n+        fetchError,\n+        liveValidation,\n+        handleCustomInputSelection,\n+        handleSubmit,\n+        handleFetchErrorReset,\n+        handleFieldChange,\n+    };\n+}\n+```\n+\n+&nbsp;\n+\n+-   **Custom Select**: Offers both search and select function with keys.\n+\n+![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+\n+&nbsp;\n+\n+-   **Error handling**: Offers fetch error handling.\n+\n+![error handling](src/assets/gif/fetch-error-handling.gif)\n+\n+&nbsp;\n+\n+## 💭 Possible future features\n+\n+-   **Filtering by month/year, biggest gain/loss**\n+\n+&nbsp;\n+\n+## 🙋‍♂️ Feel free to contact me\n+\n+Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n+\n+&nbsp;\n+\n+## 👏 Thanks / Special thanks / Credits\n+\n+Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218431176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,182 +13,12 @@\n 3. **Unit and integration tests**\n \n     - Includes \"spyOn\" and \"mock\" usage.\n \n-&nbsp;\n+4. 2. **Custom pagination implementation**\n \n-## 💡 Technologies\n-\n-![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n-![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n-![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n-![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n-![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n-![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n-![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n-![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n-\n &nbsp;\n \n-## 💿 Installation\n-\n-The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n-\n-1. **Install Dependencies**\n-\n-    - Open your terminal.\n-    - Navigate to the project's root directory.\n-    - Type `npm i` to install the necessary packages.\n-\n-2. **API Key Setup**\n-\n-    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n-    - In the `src` folder of the project, create a file named `API_KEY.js`.\n-    - Inside `API_KEY.js`, export the API key as follows:\n-\n-        ```javascript\n-        const API_KEY = 'your_api_key_here';\n-        export default API_KEY;\n-        ```\n-\n-    - Replace `your_api_key_here` with the actual API key you obtained.\n-\n-By following these steps, you will set up the necessary environment and API access for the application.\n-\n-&nbsp;\n-\n-## 🤔 Solutions provided in the project\n-\n-**Custom Hook for the form component**\n-\n-```javascript\n-function useForm() {\n-    const { formData, formErrors } = useSelector(store => store.form);\n-    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n-    const dispatch = useDispatch();\n-\n-    useEffect(() => {\n-        if (formData.date !== '' && formData.currency !== '') {\n-            const [dateString] = formData.date.split('T');\n-            const [_, currencyString] = formData.currency.split(' ');\n-\n-            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n-        }\n-    }, [formData.date, formData.currency]);\n-\n-    const liveValidation = input => {\n-        const { name } = input;\n-        const errorInState = formErrors[name];\n-        if (!errorInState) return;\n-\n-        const inputError = h.validate(db.formFields, [input]);\n-        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n-        if (!isErrorObjEmpty) return;\n-\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleCustomInputSelection = (name, value) => {\n-        dispatch(formActions.setFormData({ name, value }));\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleSubmit = e => {\n-        e.preventDefault();\n-\n-        const form = e.target;\n-\n-        // input validation\n-        const inputElements = h.findInputElementsInForm(form);\n-        const fieldErrors = h.validate(db.formFields, inputElements);\n-\n-        // custom validation\n-        const customInputsErrors = h.customValidation(db.formFields, formData);\n-        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n-\n-        dispatch(formActions.setErrors(updatedErrors));\n-\n-        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n-        if (!isFormClean) {\n-            return;\n-        }\n-\n-        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n-        dispatch(formActions.resetForm());\n-    };\n-\n-    const handleFetchErrorReset = () => {\n-        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n-    };\n-\n-    const handleFieldChange = e => {\n-        const { name, value } = e.target;\n-        dispatch(formActions.setFormData({ name, value }));\n-        liveValidation(e.target);\n-    };\n-\n-    return {\n-        formData,\n-        formErrors,\n-        loading,\n-        fetchError,\n-        liveValidation,\n-        handleCustomInputSelection,\n-        handleSubmit,\n-        handleFetchErrorReset,\n-        handleFieldChange,\n-    };\n-}\n-```\n-\n-&nbsp;\n-\n--   **Custom Select**: Offers both search and select function with keys.\n-\n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n-\n-&nbsp;\n-\n--   **Error handling**: Offers fetch error handling.\n-\n-![error handling](src/assets/gif/fetch-error-handling.gif)\n-\n-&nbsp;\n-\n-## 💭 Possible future features\n-\n--   **Filtering by month/year, biggest gain/loss**\n-\n-&nbsp;\n-\n-## 🙋‍♂️ Feel free to contact me\n-\n-Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n-\n-&nbsp;\n-\n-## 👏 Thanks / Special thanks / Credits\n-\n-Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n-![application presentation](src/assets/gif/add-transaction.gif)\n-\n-# React Custom Table\n-\n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n-\n-**Main features**:\n-\n-1. **Easy to implement custom table component**\n-\n-2. **Custom pagination implementation**\n-\n-3. **Unit and integration tests**\n-\n-    - Includes \"spyOn\" and \"mock\" usage.\n-\n-&nbsp;\n-\n ## 💡 Technologies\n \n ![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n ![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n@@ -341,194 +171,4 @@\n \n ## 👏 Thanks / Special thanks / Credits\n \n Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n-![application presentation](src/assets/gif/add-transaction.gif)\n-\n-# React Custom Table\n-\n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n-\n-**Main features**:\n-\n-1. **Easy to implement custom table component**\n-\n-2. **Custom pagination implementation**\n-\n-3. **Unit and integration tests**\n-\n-    - Includes \"spyOn\" and \"mock\" usage.\n-    - Provides clear, interactive charts to display profit or loss.\n-\n-4. **Redux Toolkit**\n-\n-    - Employs Redux Toolkit for efficient state management.\n-\n-5. **Dark Mode**\n-\n-    - Offers a user-friendly dark mode.\n-    - Reduces eye strain and provides an alternative aesthetic.\n-\n-6. **Custom Hooks for Form**\n-\n-    - Custom hooks enhance form handling and selection options.\n-\n-7. **Local Storage**\n-    - Stores user data and preferences locally.\n-    - Allows for persistent user experiences and quick data retrieval.\n-\n-&nbsp;\n-\n-## 💡 Technologies\n-\n-![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n-![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n-![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n-![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n-![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n-![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n-![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n-![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n-\n-&nbsp;\n-\n-## 💿 Installation\n-\n-The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n-\n-1. **Install Dependencies**\n-\n-    - Open your terminal.\n-    - Navigate to the project's root directory.\n-    - Type `npm i` to install the necessary packages.\n-\n-2. **API Key Setup**\n-\n-    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n-    - In the `src` folder of the project, create a file named `API_KEY.js`.\n-    - Inside `API_KEY.js`, export the API key as follows:\n-\n-        ```javascript\n-        const API_KEY = 'your_api_key_here';\n-        export default API_KEY;\n-        ```\n-\n-    - Replace `your_api_key_here` with the actual API key you obtained.\n-\n-By following these steps, you will set up the necessary environment and API access for the application.\n-\n-&nbsp;\n-\n-## 🤔 Solutions provided in the project\n-\n-**Custom Hook for the form component**\n-\n-```javascript\n-function useForm() {\n-    const { formData, formErrors } = useSelector(store => store.form);\n-    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n-    const dispatch = useDispatch();\n-\n-    useEffect(() => {\n-        if (formData.date !== '' && formData.currency !== '') {\n-            const [dateString] = formData.date.split('T');\n-            const [_, currencyString] = formData.currency.split(' ');\n-\n-            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n-        }\n-    }, [formData.date, formData.currency]);\n-\n-    const liveValidation = input => {\n-        const { name } = input;\n-        const errorInState = formErrors[name];\n-        if (!errorInState) return;\n-\n-        const inputError = h.validate(db.formFields, [input]);\n-        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n-        if (!isErrorObjEmpty) return;\n-\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleCustomInputSelection = (name, value) => {\n-        dispatch(formActions.setFormData({ name, value }));\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleSubmit = e => {\n-        e.preventDefault();\n-\n-        const form = e.target;\n-\n-        // input validation\n-        const inputElements = h.findInputElementsInForm(form);\n-        const fieldErrors = h.validate(db.formFields, inputElements);\n-\n-        // custom validation\n-        const customInputsErrors = h.customValidation(db.formFields, formData);\n-        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n-\n-        dispatch(formActions.setErrors(updatedErrors));\n-\n-        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n-        if (!isFormClean) {\n-            return;\n-        }\n-\n-        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n-        dispatch(formActions.resetForm());\n-    };\n-\n-    const handleFetchErrorReset = () => {\n-        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n-    };\n-\n-    const handleFieldChange = e => {\n-        const { name, value } = e.target;\n-        dispatch(formActions.setFormData({ name, value }));\n-        liveValidation(e.target);\n-    };\n-\n-    return {\n-        formData,\n-        formErrors,\n-        loading,\n-        fetchError,\n-        liveValidation,\n-        handleCustomInputSelection,\n-        handleSubmit,\n-        handleFetchErrorReset,\n-        handleFieldChange,\n-    };\n-}\n-```\n-\n-&nbsp;\n-\n--   **Custom Select**: Offers both search and select function with keys.\n-\n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n-\n-&nbsp;\n-\n--   **Error handling**: Offers fetch error handling.\n-\n-![error handling](src/assets/gif/fetch-error-handling.gif)\n-\n-&nbsp;\n-\n-## 💭 Possible future features\n-\n--   **Filtering by month/year, biggest gain/loss**\n-\n-&nbsp;\n-\n-## 🙋‍♂️ Feel free to contact me\n-\n-Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n-\n-&nbsp;\n-\n-## 👏 Thanks / Special thanks / Credits\n-\n-Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218438474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+![application presentation](https://photos.app.goo.gl/wdWsbPczgMTNCXxWA)\n+\n+# React Custom Table\n+\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n+\n+**Main features**:\n+\n+1. **Easy to implement custom table component**\n+\n+2. **Custom pagination implementation**\n+\n+3. **Unit and integration tests**\n+\n+    - Includes \"spyOn\" and \"mock\" usage.\n+\n+4. 2. **Styled Components**\n+\n+&nbsp;\n+\n+## 💡 Technologies\n+\n+![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n+![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n+![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n+![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n+![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n+![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n+![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n+![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n+\n+&nbsp;\n+\n+## 💿 Installation\n+\n+The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n+\n+1. **Install Dependencies**\n+\n+    - Open your terminal.\n+    - Navigate to the project's root directory.\n+    - Type `npm i` to install the necessary packages.\n+\n+2. **API Key Setup**\n+\n+    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n+    - In the `src` folder of the project, create a file named `API_KEY.js`.\n+    - Inside `API_KEY.js`, export the API key as follows:\n+\n+        ```javascript\n+        const API_KEY = 'your_api_key_here';\n+        export default API_KEY;\n+        ```\n+\n+    - Replace `your_api_key_here` with the actual API key you obtained.\n+\n+By following these steps, you will set up the necessary environment and API access for the application.\n+\n+&nbsp;\n+\n+## 🤔 Solutions provided in the project\n+\n+**Custom Hook for the form component**\n+\n+```javascript\n+function useForm() {\n+    const { formData, formErrors } = useSelector(store => store.form);\n+    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n+    const dispatch = useDispatch();\n+\n+    useEffect(() => {\n+        if (formData.date !== '' && formData.currency !== '') {\n+            const [dateString] = formData.date.split('T');\n+            const [_, currencyString] = formData.currency.split(' ');\n+\n+            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n+        }\n+    }, [formData.date, formData.currency]);\n+\n+    const liveValidation = input => {\n+        const { name } = input;\n+        const errorInState = formErrors[name];\n+        if (!errorInState) return;\n+\n+        const inputError = h.validate(db.formFields, [input]);\n+        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n+        if (!isErrorObjEmpty) return;\n+\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleCustomInputSelection = (name, value) => {\n+        dispatch(formActions.setFormData({ name, value }));\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleSubmit = e => {\n+        e.preventDefault();\n+\n+        const form = e.target;\n+\n+        // input validation\n+        const inputElements = h.findInputElementsInForm(form);\n+        const fieldErrors = h.validate(db.formFields, inputElements);\n+\n+        // custom validation\n+        const customInputsErrors = h.customValidation(db.formFields, formData);\n+        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n+\n+        dispatch(formActions.setErrors(updatedErrors));\n+\n+        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n+        if (!isFormClean) {\n+            return;\n+        }\n+\n+        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n+        dispatch(formActions.resetForm());\n+    };\n+\n+    const handleFetchErrorReset = () => {\n+        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n+    };\n+\n+    const handleFieldChange = e => {\n+        const { name, value } = e.target;\n+        dispatch(formActions.setFormData({ name, value }));\n+        liveValidation(e.target);\n+    };\n+\n+    return {\n+        formData,\n+        formErrors,\n+        loading,\n+        fetchError,\n+        liveValidation,\n+        handleCustomInputSelection,\n+        handleSubmit,\n+        handleFetchErrorReset,\n+        handleFieldChange,\n+    };\n+}\n+```\n+\n+&nbsp;\n+\n+-   **Custom Select**: Offers both search and select function with keys.\n+\n+![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+\n+&nbsp;\n+\n+-   **Error handling**: Offers fetch error handling.\n+\n+![error handling](src/assets/gif/fetch-error-handling.gif)\n+\n+&nbsp;\n+\n+## 💭 Possible future features\n+\n+-   **Filtering by month/year, biggest gain/loss**\n+\n+&nbsp;\n+\n+## 🙋‍♂️ Feel free to contact me\n+\n+Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n+\n+&nbsp;\n+\n+## 👏 Thanks / Special thanks / Credits\n+\n+Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218457761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n 3. **Unit and integration tests**\n \n     - Includes \"spyOn\" and \"mock\" usage.\n \n-4. 2. **Styled Components**\n+4. **Styled Components**\n \n &nbsp;\n \n ## 💡 Technologies\n@@ -25,188 +25,12 @@\n ![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n ![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n ![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n ![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n-![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n-![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n-![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n \n-&nbsp;\n \n-## 💿 Installation\n-\n-The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n-\n-1. **Install Dependencies**\n-\n-    - Open your terminal.\n-    - Navigate to the project's root directory.\n-    - Type `npm i` to install the necessary packages.\n-\n-2. **API Key Setup**\n-\n-    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n-    - In the `src` folder of the project, create a file named `API_KEY.js`.\n-    - Inside `API_KEY.js`, export the API key as follows:\n-\n-        ```javascript\n-        const API_KEY = 'your_api_key_here';\n-        export default API_KEY;\n-        ```\n-\n-    - Replace `your_api_key_here` with the actual API key you obtained.\n-\n-By following these steps, you will set up the necessary environment and API access for the application.\n-\n &nbsp;\n \n-## 🤔 Solutions provided in the project\n-\n-**Custom Hook for the form component**\n-\n-```javascript\n-function useForm() {\n-    const { formData, formErrors } = useSelector(store => store.form);\n-    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n-    const dispatch = useDispatch();\n-\n-    useEffect(() => {\n-        if (formData.date !== '' && formData.currency !== '') {\n-            const [dateString] = formData.date.split('T');\n-            const [_, currencyString] = formData.currency.split(' ');\n-\n-            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n-        }\n-    }, [formData.date, formData.currency]);\n-\n-    const liveValidation = input => {\n-        const { name } = input;\n-        const errorInState = formErrors[name];\n-        if (!errorInState) return;\n-\n-        const inputError = h.validate(db.formFields, [input]);\n-        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n-        if (!isErrorObjEmpty) return;\n-\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleCustomInputSelection = (name, value) => {\n-        dispatch(formActions.setFormData({ name, value }));\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleSubmit = e => {\n-        e.preventDefault();\n-\n-        const form = e.target;\n-\n-        // input validation\n-        const inputElements = h.findInputElementsInForm(form);\n-        const fieldErrors = h.validate(db.formFields, inputElements);\n-\n-        // custom validation\n-        const customInputsErrors = h.customValidation(db.formFields, formData);\n-        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n-\n-        dispatch(formActions.setErrors(updatedErrors));\n-\n-        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n-        if (!isFormClean) {\n-            return;\n-        }\n-\n-        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n-        dispatch(formActions.resetForm());\n-    };\n-\n-    const handleFetchErrorReset = () => {\n-        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n-    };\n-\n-    const handleFieldChange = e => {\n-        const { name, value } = e.target;\n-        dispatch(formActions.setFormData({ name, value }));\n-        liveValidation(e.target);\n-    };\n-\n-    return {\n-        formData,\n-        formErrors,\n-        loading,\n-        fetchError,\n-        liveValidation,\n-        handleCustomInputSelection,\n-        handleSubmit,\n-        handleFetchErrorReset,\n-        handleFieldChange,\n-    };\n-}\n-```\n-\n-&nbsp;\n-\n--   **Custom Select**: Offers both search and select function with keys.\n-\n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n-\n-&nbsp;\n-\n--   **Error handling**: Offers fetch error handling.\n-\n-![error handling](src/assets/gif/fetch-error-handling.gif)\n-\n-&nbsp;\n-\n-## 💭 Possible future features\n-\n--   **Filtering by month/year, biggest gain/loss**\n-\n-&nbsp;\n-\n-## 🙋‍♂️ Feel free to contact me\n-\n-Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n-\n-&nbsp;\n-\n-## 👏 Thanks / Special thanks / Credits\n-\n-Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n-![application presentation](https://photos.app.goo.gl/wdWsbPczgMTNCXxWA)\n-\n-# React Custom Table\n-\n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n-\n-**Main features**:\n-\n-1. **Easy to implement custom table component**\n-\n-2. **Custom pagination implementation**\n-\n-3. **Unit and integration tests**\n-\n-    - Includes \"spyOn\" and \"mock\" usage.\n-\n-4. 2. **Custom pagination implementation**\n-\n-&nbsp;\n-\n-## 💡 Technologies\n-\n-![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n-![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n-![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n-![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n-![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n-![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n-![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n-![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n-\n-&nbsp;\n-\n ## 💿 Installation\n \n The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n \n"
                },
                {
                    "date": 1706218599376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,11 @@\n ![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n ![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n ![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n ![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n \n \n+\n &nbsp;\n \n ## 💿 Installation\n \n"
                },
                {
                    "date": 1706218605482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,11 @@\n ![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n ![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n ![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n ![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Jest]\n \n \n-\n &nbsp;\n \n ## 💿 Installation\n \n"
                },
                {
                    "date": 1706218611220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n ![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n ![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n ![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n ![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Jest]\n+![Jest](https://img.shields.io/badge/-jest-%23C21325?style=for-the-badge&logo=jest&logoColor=white)\n \n \n &nbsp;\n \n"
                },
                {
                    "date": 1706218642393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,12 @@\n ![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n ![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n ![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n ![Jest](https://img.shields.io/badge/-jest-%23C21325?style=for-the-badge&logo=jest&logoColor=white)\n+![Testing-Library](https://img.shields.io/badge/-TestingLibrary-%23E33332?style=for-the-badge&logo=testing-library&logoColor=white)\n \n \n+\n &nbsp;\n \n ## 💿 Installation\n \n"
                },
                {
                    "date": 1706218665490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,36 +28,12 @@\n ![Jest](https://img.shields.io/badge/-jest-%23C21325?style=for-the-badge&logo=jest&logoColor=white)\n ![Testing-Library](https://img.shields.io/badge/-TestingLibrary-%23E33332?style=for-the-badge&logo=testing-library&logoColor=white)\n \n \n-\n &nbsp;\n \n ## 💿 Installation\n \n-The project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n-\n-1. **Install Dependencies**\n-\n-    - Open your terminal.\n-    - Navigate to the project's root directory.\n-    - Type `npm i` to install the necessary packages.\n-\n-2. **API Key Setup**\n-\n-    - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n-    - In the `src` folder of the project, create a file named `API_KEY.js`.\n-    - Inside `API_KEY.js`, export the API key as follows:\n-\n-        ```javascript\n-        const API_KEY = 'your_api_key_here';\n-        export default API_KEY;\n-        ```\n-\n-    - Replace `your_api_key_here` with the actual API key you obtained.\n-\n-By following these steps, you will set up the necessary environment and API access for the application.\n-\n &nbsp;\n \n ## 🤔 Solutions provided in the project\n \n"
                },
                {
                    "date": 1706218676595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n ![application presentation](https://photos.app.goo.gl/wdWsbPczgMTNCXxWA)\n \n-# React Custom Table\n+# React Custom Table \n \n The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n \n **Main features**:\n@@ -30,12 +30,8 @@\n \n \n &nbsp;\n \n-## 💿 Installation\n-\n-&nbsp;\n-\n ## 🤔 Solutions provided in the project\n \n **Custom Hook for the form component**\n \n"
                },
                {
                    "date": 1706218689805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n ![application presentation](https://photos.app.goo.gl/wdWsbPczgMTNCXxWA)\n \n-# React Custom Table \n+# React Custom Table 👉\n \n The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n \n **Main features**:\n"
                },
                {
                    "date": 1706218821005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+![application presentation](https://photos.app.goo.gl/wdWsbPczgMTNCXxWA)\n+\n+# React Custom Table 👉 \n+\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n+\n+**Main features**:\n+\n+1. **Easy to implement custom table component**\n+\n+2. **Custom pagination implementation**\n+\n+3. **Unit and integration tests**\n+\n+    - Includes \"spyOn\" and \"mock\" usage.\n+\n+4. **Styled Components**\n+\n+&nbsp;\n+\n+## 💡 Technologies\n+\n+![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n+![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n+![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n+![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n+![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Jest](https://img.shields.io/badge/-jest-%23C21325?style=for-the-badge&logo=jest&logoColor=white)\n+![Testing-Library](https://img.shields.io/badge/-TestingLibrary-%23E33332?style=for-the-badge&logo=testing-library&logoColor=white)\n+\n+\n+&nbsp;\n+\n+## 🤔 Solutions provided in the project\n+\n+**Solution 1 - custom hook for pagination?**\n+\n+```javascript\n+function useForm() {\n+    const { formData, formErrors } = useSelector(store => store.form);\n+    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n+    const dispatch = useDispatch();\n+\n+    useEffect(() => {\n+        if (formData.date !== '' && formData.currency !== '') {\n+            const [dateString] = formData.date.split('T');\n+            const [_, currencyString] = formData.currency.split(' ');\n+\n+            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n+        }\n+    }, [formData.date, formData.currency]);\n+\n+    const liveValidation = input => {\n+        const { name } = input;\n+        const errorInState = formErrors[name];\n+        if (!errorInState) return;\n+\n+        const inputError = h.validate(db.formFields, [input]);\n+        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n+        if (!isErrorObjEmpty) return;\n+\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleCustomInputSelection = (name, value) => {\n+        dispatch(formActions.setFormData({ name, value }));\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleSubmit = e => {\n+        e.preventDefault();\n+\n+        const form = e.target;\n+\n+        // input validation\n+        const inputElements = h.findInputElementsInForm(form);\n+        const fieldErrors = h.validate(db.formFields, inputElements);\n+\n+        // custom validation\n+        const customInputsErrors = h.customValidation(db.formFields, formData);\n+        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n+\n+        dispatch(formActions.setErrors(updatedErrors));\n+\n+        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n+        if (!isFormClean) {\n+            return;\n+        }\n+\n+        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n+        dispatch(formActions.resetForm());\n+    };\n+\n+    const handleFetchErrorReset = () => {\n+        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n+    };\n+\n+    const handleFieldChange = e => {\n+        const { name, value } = e.target;\n+        dispatch(formActions.setFormData({ name, value }));\n+        liveValidation(e.target);\n+    };\n+\n+    return {\n+        formData,\n+        formErrors,\n+        loading,\n+        fetchError,\n+        liveValidation,\n+        handleCustomInputSelection,\n+        handleSubmit,\n+        handleFetchErrorReset,\n+        handleFieldChange,\n+    };\n+}\n+```\n+\n+&nbsp;\n+\n+-   **Custom Select**: Offers both search and select function with keys.\n+\n+![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+\n+&nbsp;\n+\n+-   **Error handling**: Offers fetch error handling.\n+\n+![error handling](src/assets/gif/fetch-error-handling.gif)\n+\n+&nbsp;\n+\n+## 💭 Possible future features\n+\n+-   **Filtering by month/year, biggest gain/loss**\n+\n+&nbsp;\n+\n+## 🙋‍♂️ Feel free to contact me\n+\n+Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n+\n+&nbsp;\n+\n+## 👏 Thanks / Special thanks / Credits\n+\n+Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218924294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n &nbsp;\n \n ## 🤔 Solutions provided in the project\n \n-**Solution 1 - custom hook for pagination?**\n+**Example of **\n \n ```javascript\n function useForm() {\n     const { formData, formErrors } = useSelector(store => store.form);\n@@ -143,150 +143,4 @@\n \n ## 👏 Thanks / Special thanks / Credits\n \n Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n-![application presentation](https://photos.app.goo.gl/wdWsbPczgMTNCXxWA)\n-\n-# React Custom Table 👉\n-\n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n-\n-**Main features**:\n-\n-1. **Easy to implement custom table component**\n-\n-2. **Custom pagination implementation**\n-\n-3. **Unit and integration tests**\n-\n-    - Includes \"spyOn\" and \"mock\" usage.\n-\n-4. **Styled Components**\n-\n-&nbsp;\n-\n-## 💡 Technologies\n-\n-![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n-![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n-![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n-![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n-![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Jest](https://img.shields.io/badge/-jest-%23C21325?style=for-the-badge&logo=jest&logoColor=white)\n-![Testing-Library](https://img.shields.io/badge/-TestingLibrary-%23E33332?style=for-the-badge&logo=testing-library&logoColor=white)\n-\n-\n-&nbsp;\n-\n-## 🤔 Solutions provided in the project\n-\n-**Custom Hook for the form component**\n-\n-```javascript\n-function useForm() {\n-    const { formData, formErrors } = useSelector(store => store.form);\n-    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n-    const dispatch = useDispatch();\n-\n-    useEffect(() => {\n-        if (formData.date !== '' && formData.currency !== '') {\n-            const [dateString] = formData.date.split('T');\n-            const [_, currencyString] = formData.currency.split(' ');\n-\n-            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n-        }\n-    }, [formData.date, formData.currency]);\n-\n-    const liveValidation = input => {\n-        const { name } = input;\n-        const errorInState = formErrors[name];\n-        if (!errorInState) return;\n-\n-        const inputError = h.validate(db.formFields, [input]);\n-        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n-        if (!isErrorObjEmpty) return;\n-\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleCustomInputSelection = (name, value) => {\n-        dispatch(formActions.setFormData({ name, value }));\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleSubmit = e => {\n-        e.preventDefault();\n-\n-        const form = e.target;\n-\n-        // input validation\n-        const inputElements = h.findInputElementsInForm(form);\n-        const fieldErrors = h.validate(db.formFields, inputElements);\n-\n-        // custom validation\n-        const customInputsErrors = h.customValidation(db.formFields, formData);\n-        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n-\n-        dispatch(formActions.setErrors(updatedErrors));\n-\n-        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n-        if (!isFormClean) {\n-            return;\n-        }\n-\n-        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n-        dispatch(formActions.resetForm());\n-    };\n-\n-    const handleFetchErrorReset = () => {\n-        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n-    };\n-\n-    const handleFieldChange = e => {\n-        const { name, value } = e.target;\n-        dispatch(formActions.setFormData({ name, value }));\n-        liveValidation(e.target);\n-    };\n-\n-    return {\n-        formData,\n-        formErrors,\n-        loading,\n-        fetchError,\n-        liveValidation,\n-        handleCustomInputSelection,\n-        handleSubmit,\n-        handleFetchErrorReset,\n-        handleFieldChange,\n-    };\n-}\n-```\n-\n-&nbsp;\n-\n--   **Custom Select**: Offers both search and select function with keys.\n-\n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n-\n-&nbsp;\n-\n--   **Error handling**: Offers fetch error handling.\n-\n-![error handling](src/assets/gif/fetch-error-handling.gif)\n-\n-&nbsp;\n-\n-## 💭 Possible future features\n-\n--   **Filtering by month/year, biggest gain/loss**\n-\n-&nbsp;\n-\n-## 🙋‍♂️ Feel free to contact me\n-\n-Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n-\n-&nbsp;\n-\n-## 👏 Thanks / Special thanks / Credits\n-\n-Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218939091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+![application presentation](https://photos.app.goo.gl/wdWsbPczgMTNCXxWA)\n+\n+# React Custom Table 👉 \n+\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n+\n+**Main features**:\n+\n+1. **Easy to implement custom table component**\n+\n+2. **Custom pagination implementation**\n+\n+3. **Unit and integration tests**\n+\n+    - Includes \"spyOn\" and \"mock\" usage.\n+\n+4. **Styled Components**\n+\n+&nbsp;\n+\n+## 💡 Technologies\n+\n+![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n+![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n+![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n+![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n+![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Jest](https://img.shields.io/badge/-jest-%23C21325?style=for-the-badge&logo=jest&logoColor=white)\n+![Testing-Library](https://img.shields.io/badge/-TestingLibrary-%23E33332?style=for-the-badge&logo=testing-library&logoColor=white)\n+\n+\n+&nbsp;\n+\n+## 🤔 Solutions provided in the project\n+\n+**Example of userProvider test**\n+\n+```javascript\n+function useForm() {\n+    const { formData, formErrors } = useSelector(store => store.form);\n+    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n+    const dispatch = useDispatch();\n+\n+    useEffect(() => {\n+        if (formData.date !== '' && formData.currency !== '') {\n+            const [dateString] = formData.date.split('T');\n+            const [_, currencyString] = formData.currency.split(' ');\n+\n+            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n+        }\n+    }, [formData.date, formData.currency]);\n+\n+    const liveValidation = input => {\n+        const { name } = input;\n+        const errorInState = formErrors[name];\n+        if (!errorInState) return;\n+\n+        const inputError = h.validate(db.formFields, [input]);\n+        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n+        if (!isErrorObjEmpty) return;\n+\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleCustomInputSelection = (name, value) => {\n+        dispatch(formActions.setFormData({ name, value }));\n+        dispatch(formActions.removeError({ name }));\n+    };\n+\n+    const handleSubmit = e => {\n+        e.preventDefault();\n+\n+        const form = e.target;\n+\n+        // input validation\n+        const inputElements = h.findInputElementsInForm(form);\n+        const fieldErrors = h.validate(db.formFields, inputElements);\n+\n+        // custom validation\n+        const customInputsErrors = h.customValidation(db.formFields, formData);\n+        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n+\n+        dispatch(formActions.setErrors(updatedErrors));\n+\n+        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n+        if (!isFormClean) {\n+            return;\n+        }\n+\n+        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n+        dispatch(formActions.resetForm());\n+    };\n+\n+    const handleFetchErrorReset = () => {\n+        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n+    };\n+\n+    const handleFieldChange = e => {\n+        const { name, value } = e.target;\n+        dispatch(formActions.setFormData({ name, value }));\n+        liveValidation(e.target);\n+    };\n+\n+    return {\n+        formData,\n+        formErrors,\n+        loading,\n+        fetchError,\n+        liveValidation,\n+        handleCustomInputSelection,\n+        handleSubmit,\n+        handleFetchErrorReset,\n+        handleFieldChange,\n+    };\n+}\n+```\n+\n+&nbsp;\n+\n+-   **Custom Select**: Offers both search and select function with keys.\n+\n+![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+\n+&nbsp;\n+\n+-   **Error handling**: Offers fetch error handling.\n+\n+![error handling](src/assets/gif/fetch-error-handling.gif)\n+\n+&nbsp;\n+\n+## 💭 Possible future features\n+\n+-   **Filtering by month/year, biggest gain/loss**\n+\n+&nbsp;\n+\n+## 🙋‍♂️ Feel free to contact me\n+\n+Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n+\n+&nbsp;\n+\n+## 👏 Thanks / Special thanks / Credits\n+\n+Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218951454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,85 +35,27 @@\n \n **Example of userProvider test**\n \n ```javascript\n-function useForm() {\n-    const { formData, formErrors } = useSelector(store => store.form);\n-    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n-    const dispatch = useDispatch();\n+ it('should fetch users with filter options', async () => {\n+        const spy = jest.spyOn(window, 'fetch');\n \n-    useEffect(() => {\n-        if (formData.date !== '' && formData.currency !== '') {\n-            const [dateString] = formData.date.split('T');\n-            const [_, currencyString] = formData.currency.split(' ');\n+        window.fetch.mockResolvedValueOnce({\n+            ok: true,\n+            json: async () => ({ users: [] }),\n+        });\n \n-            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n-        }\n-    }, [formData.date, formData.currency]);\n+        const filterOptions = { field: 'firstName', value: 'Miles' };\n+        const data = await getUsers(filterOptions);\n \n-    const liveValidation = input => {\n-        const { name } = input;\n-        const errorInState = formErrors[name];\n-        if (!errorInState) return;\n+        expect(data.users).toEqual([]);\n+        expect(window.fetch).toHaveBeenCalledTimes(1);\n+        expect(window.fetch).toHaveBeenCalledWith(\n+            `https://dummyjson.com/users/filter?key=${filterOptions.field}&value=${filterOptions.value}`,\n+        );\n \n-        const inputError = h.validate(db.formFields, [input]);\n-        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n-        if (!isErrorObjEmpty) return;\n-\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleCustomInputSelection = (name, value) => {\n-        dispatch(formActions.setFormData({ name, value }));\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleSubmit = e => {\n-        e.preventDefault();\n-\n-        const form = e.target;\n-\n-        // input validation\n-        const inputElements = h.findInputElementsInForm(form);\n-        const fieldErrors = h.validate(db.formFields, inputElements);\n-\n-        // custom validation\n-        const customInputsErrors = h.customValidation(db.formFields, formData);\n-        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n-\n-        dispatch(formActions.setErrors(updatedErrors));\n-\n-        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n-        if (!isFormClean) {\n-            return;\n-        }\n-\n-        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n-        dispatch(formActions.resetForm());\n-    };\n-\n-    const handleFetchErrorReset = () => {\n-        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n-    };\n-\n-    const handleFieldChange = e => {\n-        const { name, value } = e.target;\n-        dispatch(formActions.setFormData({ name, value }));\n-        liveValidation(e.target);\n-    };\n-\n-    return {\n-        formData,\n-        formErrors,\n-        loading,\n-        fetchError,\n-        liveValidation,\n-        handleCustomInputSelection,\n-        handleSubmit,\n-        handleFetchErrorReset,\n-        handleFieldChange,\n-    };\n-}\n+        spy.mockRestore();\n+    });\n ```\n \n &nbsp;\n \n@@ -143,150 +85,4 @@\n \n ## 👏 Thanks / Special thanks / Credits\n \n Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n-![application presentation](https://photos.app.goo.gl/wdWsbPczgMTNCXxWA)\n-\n-# React Custom Table 👉 \n-\n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n-\n-**Main features**:\n-\n-1. **Easy to implement custom table component**\n-\n-2. **Custom pagination implementation**\n-\n-3. **Unit and integration tests**\n-\n-    - Includes \"spyOn\" and \"mock\" usage.\n-\n-4. **Styled Components**\n-\n-&nbsp;\n-\n-## 💡 Technologies\n-\n-![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n-![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n-![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n-![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n-![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Jest](https://img.shields.io/badge/-jest-%23C21325?style=for-the-badge&logo=jest&logoColor=white)\n-![Testing-Library](https://img.shields.io/badge/-TestingLibrary-%23E33332?style=for-the-badge&logo=testing-library&logoColor=white)\n-\n-\n-&nbsp;\n-\n-## 🤔 Solutions provided in the project\n-\n-**Example of **\n-\n-```javascript\n-function useForm() {\n-    const { formData, formErrors } = useSelector(store => store.form);\n-    const { loading, error: fetchError } = useSelector(store => store.currency.historical);\n-    const dispatch = useDispatch();\n-\n-    useEffect(() => {\n-        if (formData.date !== '' && formData.currency !== '') {\n-            const [dateString] = formData.date.split('T');\n-            const [_, currencyString] = formData.currency.split(' ');\n-\n-            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n-        }\n-    }, [formData.date, formData.currency]);\n-\n-    const liveValidation = input => {\n-        const { name } = input;\n-        const errorInState = formErrors[name];\n-        if (!errorInState) return;\n-\n-        const inputError = h.validate(db.formFields, [input]);\n-        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n-        if (!isErrorObjEmpty) return;\n-\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleCustomInputSelection = (name, value) => {\n-        dispatch(formActions.setFormData({ name, value }));\n-        dispatch(formActions.removeError({ name }));\n-    };\n-\n-    const handleSubmit = e => {\n-        e.preventDefault();\n-\n-        const form = e.target;\n-\n-        // input validation\n-        const inputElements = h.findInputElementsInForm(form);\n-        const fieldErrors = h.validate(db.formFields, inputElements);\n-\n-        // custom validation\n-        const customInputsErrors = h.customValidation(db.formFields, formData);\n-        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n-\n-        dispatch(formActions.setErrors(updatedErrors));\n-\n-        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n-        if (!isFormClean) {\n-            return;\n-        }\n-\n-        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n-        dispatch(formActions.resetForm());\n-    };\n-\n-    const handleFetchErrorReset = () => {\n-        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n-    };\n-\n-    const handleFieldChange = e => {\n-        const { name, value } = e.target;\n-        dispatch(formActions.setFormData({ name, value }));\n-        liveValidation(e.target);\n-    };\n-\n-    return {\n-        formData,\n-        formErrors,\n-        loading,\n-        fetchError,\n-        liveValidation,\n-        handleCustomInputSelection,\n-        handleSubmit,\n-        handleFetchErrorReset,\n-        handleFieldChange,\n-    };\n-}\n-```\n-\n-&nbsp;\n-\n--   **Custom Select**: Offers both search and select function with keys.\n-\n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n-\n-&nbsp;\n-\n--   **Error handling**: Offers fetch error handling.\n-\n-![error handling](src/assets/gif/fetch-error-handling.gif)\n-\n-&nbsp;\n-\n-## 💭 Possible future features\n-\n--   **Filtering by month/year, biggest gain/loss**\n-\n-&nbsp;\n-\n-## 🙋‍♂️ Feel free to contact me\n-\n-Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n-\n-&nbsp;\n-\n-## 👏 Thanks / Special thanks / Credits\n-\n-Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706218971807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n ![application presentation](https://photos.app.goo.gl/wdWsbPczgMTNCXxWA)\n \n-# React Custom Table 👉 \n+# React Custom Table 👉\n \n The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n \n **Main features**:\n@@ -27,40 +27,39 @@\n ![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n ![Jest](https://img.shields.io/badge/-jest-%23C21325?style=for-the-badge&logo=jest&logoColor=white)\n ![Testing-Library](https://img.shields.io/badge/-TestingLibrary-%23E33332?style=for-the-badge&logo=testing-library&logoColor=white)\n \n-\n &nbsp;\n \n ## 🤔 Solutions provided in the project\n \n **Example of userProvider test**\n \n ```javascript\n- it('should fetch users with filter options', async () => {\n-        const spy = jest.spyOn(window, 'fetch');\n+it('should fetch users with filter options', async () => {\n+    const spy = jest.spyOn(window, 'fetch');\n \n-        window.fetch.mockResolvedValueOnce({\n-            ok: true,\n-            json: async () => ({ users: [] }),\n-        });\n+    window.fetch.mockResolvedValueOnce({\n+        ok: true,\n+        json: async () => ({ users: [] }),\n+    });\n \n-        const filterOptions = { field: 'firstName', value: 'Miles' };\n-        const data = await getUsers(filterOptions);\n+    const filterOptions = { field: 'firstName', value: 'Miles' };\n+    const data = await getUsers(filterOptions);\n \n-        expect(data.users).toEqual([]);\n-        expect(window.fetch).toHaveBeenCalledTimes(1);\n-        expect(window.fetch).toHaveBeenCalledWith(\n-            `https://dummyjson.com/users/filter?key=${filterOptions.field}&value=${filterOptions.value}`,\n-        );\n+    expect(data.users).toEqual([]);\n+    expect(window.fetch).toHaveBeenCalledTimes(1);\n+    expect(window.fetch).toHaveBeenCalledWith(\n+        `https://dummyjson.com/users/filter?key=${filterOptions.field}&value=${filterOptions.value}`,\n+    );\n \n-        spy.mockRestore();\n-    });\n+    spy.mockRestore();\n+});\n ```\n \n &nbsp;\n \n--   **Custom Select**: Offers both search and select function with keys.\n+-   **Example of **: Offers both search and select function with keys.\n \n ![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n \n &nbsp;\n"
                },
                {
                    "date": 1706218985613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n ```\n \n &nbsp;\n \n--   **Example of **: Offers both search and select function with keys.\n+-   **Example o**: Offers both search and select function with keys.\n \n ![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n \n &nbsp;\n"
                },
                {
                    "date": 1706218993866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+![application presentation](https://photos.app.goo.gl/wdWsbPczgMTNCXxWA)\n+\n+# React Custom Table 👉\n+\n+The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n+\n+**Main features**:\n+\n+1. **Easy to implement custom table component**\n+\n+2. **Custom pagination implementation**\n+\n+3. **Unit and integration tests**\n+\n+    - Includes \"spyOn\" and \"mock\" usage.\n+\n+4. **Styled Components**\n+\n+&nbsp;\n+\n+## 💡 Technologies\n+\n+![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n+![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n+![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n+![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n+![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n+![Jest](https://img.shields.io/badge/-jest-%23C21325?style=for-the-badge&logo=jest&logoColor=white)\n+![Testing-Library](https://img.shields.io/badge/-TestingLibrary-%23E33332?style=for-the-badge&logo=testing-library&logoColor=white)\n+\n+&nbsp;\n+\n+## 🤔 Solutions provided in the project\n+\n+**Example of userProvider test**\n+\n+```javascript\n+it('should fetch users with filter options', async () => {\n+    const spy = jest.spyOn(window, 'fetch');\n+\n+    window.fetch.mockResolvedValueOnce({\n+        ok: true,\n+        json: async () => ({ users: [] }),\n+    });\n+\n+    const filterOptions = { field: 'firstName', value: 'Miles' };\n+    const data = await getUsers(filterOptions);\n+\n+    expect(data.users).toEqual([]);\n+    expect(window.fetch).toHaveBeenCalledTimes(1);\n+    expect(window.fetch).toHaveBeenCalledWith(\n+        `https://dummyjson.com/users/filter?key=${filterOptions.field}&value=${filterOptions.value}`,\n+    );\n+\n+    spy.mockRestore();\n+});\n+```\n+\n+&nbsp;\n+\n+-   **Example of UseTable **: Offers both search and select function with keys.\n+\n+![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+\n+&nbsp;\n+\n+-   **Error handling**: Offers fetch error handling.\n+\n+![error handling](src/assets/gif/fetch-error-handling.gif)\n+\n+&nbsp;\n+\n+## 💭 Possible future features\n+\n+-   **Filtering by month/year, biggest gain/loss**\n+\n+&nbsp;\n+\n+## 🙋‍♂️ Feel free to contact me\n+\n+Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n+\n+&nbsp;\n+\n+## 👏 Thanks / Special thanks / Credits\n+\n+Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706219001579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n ```\n \n &nbsp;\n \n--   **Example of UseTable **: Offers both search and select function with keys.\n+-   **Example of UseTable test**\n \n ![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n \n &nbsp;\n@@ -84,91 +84,4 @@\n \n ## 👏 Thanks / Special thanks / Credits\n \n Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n-![application presentation](https://photos.app.goo.gl/wdWsbPczgMTNCXxWA)\n-\n-# React Custom Table 👉\n-\n-The React Table application is designed to demonstrate the implementation of table features, including custom pagination and basic API data fetching. It serves as an educational tool for practicing the React Testing Library, focusing on writing unit and integration tests.\n-\n-**Main features**:\n-\n-1. **Easy to implement custom table component**\n-\n-2. **Custom pagination implementation**\n-\n-3. **Unit and integration tests**\n-\n-    - Includes \"spyOn\" and \"mock\" usage.\n-\n-4. **Styled Components**\n-\n-&nbsp;\n-\n-## 💡 Technologies\n-\n-![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n-![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n-![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n-![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n-![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n-![Jest](https://img.shields.io/badge/-jest-%23C21325?style=for-the-badge&logo=jest&logoColor=white)\n-![Testing-Library](https://img.shields.io/badge/-TestingLibrary-%23E33332?style=for-the-badge&logo=testing-library&logoColor=white)\n-\n-&nbsp;\n-\n-## 🤔 Solutions provided in the project\n-\n-**Example of userProvider test**\n-\n-```javascript\n-it('should fetch users with filter options', async () => {\n-    const spy = jest.spyOn(window, 'fetch');\n-\n-    window.fetch.mockResolvedValueOnce({\n-        ok: true,\n-        json: async () => ({ users: [] }),\n-    });\n-\n-    const filterOptions = { field: 'firstName', value: 'Miles' };\n-    const data = await getUsers(filterOptions);\n-\n-    expect(data.users).toEqual([]);\n-    expect(window.fetch).toHaveBeenCalledTimes(1);\n-    expect(window.fetch).toHaveBeenCalledWith(\n-        `https://dummyjson.com/users/filter?key=${filterOptions.field}&value=${filterOptions.value}`,\n-    );\n-\n-    spy.mockRestore();\n-});\n-```\n-\n-&nbsp;\n-\n--   **Example o**: Offers both search and select function with keys.\n-\n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n-\n-&nbsp;\n-\n--   **Error handling**: Offers fetch error handling.\n-\n-![error handling](src/assets/gif/fetch-error-handling.gif)\n-\n-&nbsp;\n-\n-## 💭 Possible future features\n-\n--   **Filtering by month/year, biggest gain/loss**\n-\n-&nbsp;\n-\n-## 🙋‍♂️ Feel free to contact me\n-\n-Write sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n-\n-&nbsp;\n-\n-## 👏 Thanks / Special thanks / Credits\n-\n-Thanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
                },
                {
                    "date": 1706219066733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,30 @@\n &nbsp;\n \n -   **Example of UseTable test**\n \n-![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n+```javascript\n+it('should fetch users with filter options', async () => {\n+    const spy = jest.spyOn(window, 'fetch');\n \n+    window.fetch.mockResolvedValueOnce({\n+        ok: true,\n+        json: async () => ({ users: [] }),\n+    });\n+\n+    const filterOptions = { field: 'firstName', value: 'Miles' };\n+    const data = await getUsers(filterOptions);\n+\n+    expect(data.users).toEqual([]);\n+    expect(window.fetch).toHaveBeenCalledTimes(1);\n+    expect(window.fetch).toHaveBeenCalledWith(\n+        `https://dummyjson.com/users/filter?key=${filterOptions.field}&value=${filterOptions.value}`,\n+    );\n+\n+    spy.mockRestore();\n+});\n+```\n+\n &nbsp;\n \n -   **Error handling**: Offers fetch error handling.\n \n"
                },
                {
                    "date": 1706219098963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,26 +60,9 @@\n \n -   **Example of UseTable test**\n \n ```javascript\n-it('should fetch users with filter options', async () => {\n-    const spy = jest.spyOn(window, 'fetch');\n \n-    window.fetch.mockResolvedValueOnce({\n-        ok: true,\n-        json: async () => ({ users: [] }),\n-    });\n-\n-    const filterOptions = { field: 'firstName', value: 'Miles' };\n-    const data = await getUsers(filterOptions);\n-\n-    expect(data.users).toEqual([]);\n-    expect(window.fetch).toHaveBeenCalledTimes(1);\n-    expect(window.fetch).toHaveBeenCalledWith(\n-        `https://dummyjson.com/users/filter?key=${filterOptions.field}&value=${filterOptions.value}`,\n-    );\n-\n-    spy.mockRestore();\n });\n ```\n \n &nbsp;\n"
                },
                {
                    "date": 1706219104150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,10 @@\n \n -   **Example of UseTable test**\n \n ```javascript\n+  \n \n-});\n ```\n \n &nbsp;\n \n"
                },
                {
                    "date": 1706219130929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,50 @@\n function setup() {\n     render(<UserTable />);\n }\n \n+jest.spyOn(window, 'fetch');\n \n+    it('should show an error when failed to fetch data', async () => {\n+        setup();\n+\n+        window.fetch.mockRejectedValueOnce(new Error('Failed to fetch data'));\n+\n+        await waitFor(() => {\n+            expect(screen.getByText('Error: Failed to fetch data')).toBeInTheDocument();\n+        });\n+\n+        fetch.mockRestore();\n+    });\n+\n+    it('displays user data correctly after fetching', async () => {\n+        const mockUsersData = {\n+            users: [\n+                { id: 1, firstName: 'John', lastName: 'Doe', email: 'john@example.com' },\n+                { id: 2, firstName: 'Alan', lastName: 'Pope', email: 'alan@pope.com' },\n+            ],\n+        };\n+\n+        jest.spyOn(window, 'fetch');\n+\n+        window.fetch.mockResolvedValueOnce({\n+            ok: true,\n+            json: async () => {\n+                return { users: mockUsersData.users };\n+            },\n+        });\n+\n+        setup();\n+\n+        await waitFor(() => {\n+            mockUsersData.users.forEach(user => {\n+                expect(screen.getByText(user.firstName)).toBeInTheDocument();\n+                expect(screen.getByText(user.email)).toBeInTheDocument();\n+            });\n+        });\n+\n+        fetch.mockRestore();\n+    });\n ```\n \n &nbsp;\n \n"
                },
                {
                    "date": 1706219206858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,8 +122,10 @@\n             pageOptions={{ limit: 10, skip: 0, currentPage: 1 }}\n         />,\n     );\n }\n+\n+\n ```\n \n ## 🙋‍♂️ Feel free to contact me\n \n"
                }
            ],
            "date": 1706217851769,
            "name": "Commit-0",
            "content": "![application presentation](src/assets/gif/add-transaction.gif)\n\n# Currency Wallet\n\nThe Currency Wallet application is a financial tracking tool that allows users to manually input their historical transactions involving various currencies. It utilizes APIs to fetch the historical exchange rates for each transaction date, providing an accurate financial overview. The application then displays a chart showing the profit or loss for each transaction, calculated based on current currency rates, enabling users to assess their investment performance over time.\n\n**Main features**:\n\n1. **API Rate Fetching**\n   - Integrates with APIs for real-time and historical currency exchange rates.\n   - Ensures accurate financial data for each transaction.\n\n2. **Live Transaction Validation**\n   - Performs live validation during transaction entry.\n\n3. **ChartJS 2 Integration**\n   - Uses ChartJS 2 for visual representation of financial data.\n   - Provides clear, interactive charts to display profit or loss.\n\n4. **Redux Toolkit**\n   - Employs Redux Toolkit for efficient state management.\n\n5. **Dark Mode**\n   - Offers a user-friendly dark mode.\n   - Reduces eye strain and provides an alternative aesthetic.\n\n6. **Custom Hooks for Form**\n   - Custom hooks enhance form handling and selection options.\n\n7. **Local Storage**\n   - Stores user data and preferences locally.\n   - Allows for persistent user experiences and quick data retrieval.\n\n&nbsp;\n\n## 💡 Technologies\n\n![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)\n![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)\n![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\n![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)\n![Styled Components](https://img.shields.io/badge/styled--components-DB7093?style=for-the-badge&logo=styled-components&logoColor=white)\n![Redux](https://img.shields.io/badge/redux-%23593d88.svg?style=for-the-badge&logo=redux&logoColor=white)\n![Webpack](https://img.shields.io/badge/webpack-%238DD6F9.svg?style=for-the-badge&logo=webpack&logoColor=black)\n![ESlint](https://img.shields.io/badge/ESLint-4B3263?style=for-the-badge&logo=eslint&logoColor=white)\n![Babel](https://img.shields.io/badge/Babel-F9DC3e?style=for-the-badge&logo=babel&logoColor=black)\n\n&nbsp;\n\n## 💿 Installation\n\nThe project uses [node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/). After ensuring they are installed, follow these steps:\n\n1. **Install Dependencies**\n   - Open your terminal.\n   - Navigate to the project's root directory.\n   - Type `npm i` to install the necessary packages.\n\n2. **API Key Setup**\n   - Obtain an API key from [API Layer's Exchange Rates](https://api.apilayer.com/exchangerates_data).\n   - In the `src` folder of the project, create a file named `API_KEY.js`.\n   - Inside `API_KEY.js`, export the API key as follows:\n\n     ```javascript\n     const API_KEY = 'your_api_key_here';\n     export default API_KEY;\n     ```\n\n   - Replace `your_api_key_here` with the actual API key you obtained.\n\nBy following these steps, you will set up the necessary environment and API access for the application.\n\n\n\n&nbsp;\n\n## 🤔 Solutions provided in the project\n\n**Custom Hook for the form component**\n\n```javascript \nfunction useForm() {\n    const { formData, formErrors } = useSelector((store) => store.form);\n    const { loading, error: fetchError } = useSelector((store) => store.currency.historical);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (formData.date !== '' && formData.currency !== '') {\n            const [dateString] = formData.date.split('T');\n            const [_, currencyString] = formData.currency.split(' ');\n\n            dispatch(fetchRates({ currency: currencyString, date: dateString, dataType: 'historical' }));\n        }\n    }, [formData.date, formData.currency]);\n\n    const liveValidation = (input) => {\n        const { name } = input;\n        const errorInState = formErrors[name];\n        if (!errorInState) return;\n\n        const inputError = h.validate(db.formFields, [input]);\n        const isErrorObjEmpty = h.isObjectEmpty(inputError);\n        if (!isErrorObjEmpty) return;\n\n        dispatch(formActions.removeError({ name }));\n    };\n\n    const handleCustomInputSelection = (name, value) => {\n        dispatch(formActions.setFormData({ name, value }));\n        dispatch(formActions.removeError({ name }));\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const form = e.target;\n\n        // input validation\n        const inputElements = h.findInputElementsInForm(form);\n        const fieldErrors = h.validate(db.formFields, inputElements);\n\n        // custom validation\n        const customInputsErrors = h.customValidation(db.formFields, formData);\n        const updatedErrors = { ...fieldErrors, ...customInputsErrors };\n\n        dispatch(formActions.setErrors(updatedErrors));\n\n        const isFormClean = h.checkErrors([formErrors, updatedErrors]);\n        if (!isFormClean) {\n            return;\n        }\n\n        dispatch(transactionsActions.addTransaction({ transaction: formData }));\n        dispatch(formActions.resetForm());\n    };\n\n    const handleFetchErrorReset = () => {\n        dispatch(currencyActions.resetFetchError({ dataType: 'historical' }));\n    };\n\n    const handleFieldChange = (e) => {\n        const { name, value } = e.target;\n        dispatch(formActions.setFormData({ name, value }));\n        liveValidation(e.target);\n    };\n\n    return {\n        formData,\n        formErrors,\n        loading,\n        fetchError,\n        liveValidation,\n        handleCustomInputSelection,\n        handleSubmit,\n        handleFetchErrorReset,\n        handleFieldChange,\n    };\n}\n\n```\n\n&nbsp;\n\n-   **Custom Select**: Offers both search and select function with keys.\n\n![custom select screenshot](src/assets/images/custom-select-screenshot.png)\n\n&nbsp;\n\n-   **Error handling**: Offers fetch error handling.\n\n![error handling](src/assets/gif/fetch-error-handling.gif)\n\n&nbsp;\n\n## 💭 Possible future features\n\n-   **Filtering by month/year, biggest gain/loss**\n\n&nbsp;\n\n## 🙋‍♂️ Feel free to contact me\n\nWrite sth nice ;) Find me on [LinkedIn ](https://www.linkedin.com/in/marcin-kulbicki-426817a4/) or [Instagram](https://www.instagram.com/yakksiek/)\n\n&nbsp;\n\n## 👏 Thanks / Special thanks / Credits\n\nThanks to my [Mentor - devmentor.pl](https://devmentor.pl/) – for providing me with this task and for code review.\n"
        }
    ]
}